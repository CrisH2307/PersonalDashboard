{"ast":null,"code":"import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\n\nvar PdfReference =\n/** @class */\nfunction () {\n  function PdfReference(objNumber, genNumber) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index3 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position3 = -1;\n    /**\n     * Holds the `object number`.\n     * @default 0\n     * @private\n     */\n\n    this.objNumber = 0;\n    /**\n     * Holds the `generation number` of the object.\n     * @default 0\n     * @private\n     */\n\n    this.genNumber = 0;\n\n    if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n      this.objNumber = objNumber;\n      this.genNumber = genNumber; // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n    } else {\n      this.objNumber = Number(objNumber);\n      this.genNumber = Number(genNumber);\n    }\n  }\n\n  Object.defineProperty(PdfReference.prototype, \"status\", {\n    //Property\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status3;\n    },\n    set: function (value) {\n      this.status3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving3;\n    },\n    set: function (value) {\n      this.isSaving3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index3;\n    },\n    set: function (value) {\n      this.index3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position3;\n    },\n    set: function (value) {\n      this.position3 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      var returnObject3 = null;\n      return returnObject3;\n    },\n    enumerable: true,\n    configurable: true\n  }); //IPdfPrimitives methods\n\n  /**\n   * `Saves` the object.\n   * @private\n   */\n\n  PdfReference.prototype.save = function (writer) {\n    writer.write(this.toString());\n  };\n  /**\n   * Returns a `string` representing the object.\n   * @private\n   */\n\n\n  PdfReference.prototype.toString = function () {\n    return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n  };\n  /**\n   * Creates a `deep copy` of the IPdfPrimitive object.\n   * @private\n   */\n\n\n  PdfReference.prototype.clone = function (crossTable) {\n    return null;\n  };\n\n  return PdfReference;\n}();\n\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\n\nvar PdfReferenceHolder =\n/** @class */\nfunction () {\n  function PdfReferenceHolder(obj1, obj2) {\n    /**\n     * Holds the `index` number of the object.\n     * @default -1\n     * @private\n     */\n    this.index4 = -1;\n    /**\n     * Internal variable to store the `position`.\n     * @default -1\n     * @private\n     */\n\n    this.position4 = -1;\n    /**\n     * The `index` of the object within the object collection.\n     * @default -1\n     * @private\n     */\n\n    this.objectIndex = -1;\n    /**\n     * @hidden\n     * @private\n     */\n\n    this.dictionaryProperties = new DictionaryProperties(); // if (typeof obj2 === 'undefined') {\n\n    this.initialize(obj1); // }\n    // else {\n    //     if (obj2 === null) {\n    //         throw new Error('ArgumentNullException : crossTable');\n    //     }\n    //     if (obj1 === null) {\n    //         throw new Error('ArgumentNullException : reference');\n    //     }\n    //     this.crossTable = obj2;\n    //     let tempObj1 : PdfReference = <PdfReference>obj1;\n    //     this.reference = tempObj1;\n    // }\n  }\n\n  Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n    //Properties\n\n    /**\n     * Gets or sets the `Status` of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.status4;\n    },\n    set: function (value) {\n      this.status4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n    /**\n     * Gets or sets a value indicating whether this document `is saving` or not.\n     * @private\n     */\n    get: function () {\n      return this.isSaving4;\n    },\n    set: function (value) {\n      this.isSaving4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n    /**\n     * Gets or sets the `index` value of the specified object.\n     * @private\n     */\n    get: function () {\n      return this.index4;\n    },\n    set: function (value) {\n      this.index4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n    /**\n     * Gets or sets the `position` of the object.\n     * @private\n     */\n    get: function () {\n      return this.position4;\n    },\n    set: function (value) {\n      this.position4 = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n    /**\n     * Returns `cloned object`.\n     * @private\n     */\n    get: function () {\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n    /**\n     * Gets the `object` the reference is of.\n     * @private\n     */\n    get: function () {\n      // if ((this.reference != null) || (this.object == null)) {\n      //     this.object = this.GetterObject();\n      // }\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n    /**\n     * Gets the `reference`.\n     * @private\n     */\n    get: function () {\n      return this.pdfReference;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n    /**\n     * Gets the `index` of the object.\n     * @private\n     */\n    get: function () {\n      // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n      // this.objectIndex = items.GetObjectIndex(this.reference);\n      // if (this.objectIndex < 0) {\n      //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n      //     this.objectIndex = items.Count - 1;\n      // }\n      return this.objectIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n    /**\n     * Gets the `element`.\n     * @private\n     */\n    get: function () {\n      return this.primitiveObject;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfReferenceHolder.prototype.initialize = function (obj1) {\n    if (obj1 instanceof PdfArray || obj1 instanceof PdfDictionary || obj1 instanceof PdfName || obj1 instanceof PdfNumber || obj1 instanceof PdfStream || obj1 instanceof PdfReference || obj1 instanceof PdfString) {\n      this.primitiveObject = obj1;\n    } else {\n      var tempObj = obj1;\n      this.initialize(tempObj.element);\n    }\n  };\n  /**\n   * `Writes` a reference into a PDF document.\n   * @private\n   */\n\n\n  PdfReferenceHolder.prototype.save = function (writer) {\n    // if (writer == null) {\n    //     throw new Error('ArgumentNullException : writer');\n    // }\n    var position = writer.position;\n    var cTable = writer.document.crossTable; // if (cTable.Document instanceof PdfDocument) {\n\n    this.object.isSaving = true; // }\n\n    var reference = null; // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n    //     if (this.reference === null) {\n    //         reference = cTable.GetReference(this.Object);\n    //     } else {\n    //         reference = this.reference;\n    //     }\n    // } else {\n    //     reference = cTable.GetReference(this.Object);\n    // }\n    // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n\n    reference = cTable.getReference(this.object); // }\n    // if (writer.Position !== position) {\n    //     writer.Position = position;\n    // }\n\n    reference.save(writer);\n  };\n  /**\n   * Creates a `copy of PdfReferenceHolder`.\n   * @private\n   */\n\n\n  PdfReferenceHolder.prototype.clone = function (crossTable) {\n    var refHolder = null;\n    var temp = null;\n    var refNum = '';\n    var reference = null; // Restricts addition of same object multiple time.\n\n    /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n        refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n        return refHolder;\n    }\n    if (Object instanceof PdfNumber) {\n        return new PdfNumber((Object as PdfNumber).IntValue);\n    }\n    */\n    // if (Object instanceof PdfDictionary) {\n    //     // Meaning the referenced page is not available for import.\n    //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n    //     let dict : PdfDictionary = Object as PdfDictionary;\n    //     if (dict.ContainsKey(type)) {\n    //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n    //         if (pageName !== null) {\n    //             if (pageName.Value === 'Page') {\n    //                 return new PdfNull();\n    //             }\n    //         }\n    //     }\n    // }\n\n    /* if (Object instanceof PdfName) {\n        return new PdfName ((Object as PdfName ).Value);\n    }\n    */\n    // Resolves circular references.\n    // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n    //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n    //     if (obj !== null) {\n    //         reference = crossTable.GetReference(obj);\n    //         return new PdfReferenceHolder(reference, crossTable);\n    //     } else {\n    //         return new PdfNull();\n    //     }\n    // }\n\n    /*if (this.Reference !== null) {\n        crossTable.PrevReference.push(this.Reference);\n    }\n    reference = crossTable.GetReference(temp);\n    refHolder = new PdfReferenceHolder(reference, crossTable);\n    return refHolder;\n    */\n\n    return null;\n  };\n\n  return PdfReferenceHolder;\n}();\n\nexport { PdfReferenceHolder };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-richtexteditor/node_modules/@syncfusion/ej2-pdf-export/src/implementation/primitives/pdf-reference.js"],"names":["DictionaryProperties","PdfStream","PdfArray","PdfNumber","PdfName","PdfDictionary","PdfString","PdfReference","objNumber","genNumber","index3","position3","Number","Object","defineProperty","prototype","get","status3","set","value","enumerable","configurable","isSaving3","returnObject3","save","writer","write","toString","clone","crossTable","PdfReferenceHolder","obj1","obj2","index4","position4","objectIndex","dictionaryProperties","initialize","status4","isSaving4","primitiveObject","pdfReference","tempObj","element","position","cTable","document","object","isSaving","reference","getReference","refHolder","temp","refNum"],"mappings":"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","sourcesContent":["import { DictionaryProperties } from './../input-output/pdf-dictionary-properties';\nimport { PdfStream } from './../primitives/pdf-stream';\nimport { PdfArray } from './../primitives/pdf-array';\nimport { PdfNumber } from './../primitives/pdf-number';\nimport { PdfName } from './../primitives/pdf-name';\nimport { PdfDictionary } from './../primitives/pdf-dictionary';\nimport { PdfString } from './../primitives/pdf-string';\n/**\n * `PdfReference` class is used to perform reference related primitive operations.\n * @private\n */\nvar PdfReference = /** @class */ (function () {\n    function PdfReference(objNumber, genNumber) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index3 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position3 = -1;\n        /**\n         * Holds the `object number`.\n         * @default 0\n         * @private\n         */\n        this.objNumber = 0;\n        /**\n         * Holds the `generation number` of the object.\n         * @default 0\n         * @private\n         */\n        this.genNumber = 0;\n        if (typeof objNumber === 'number' && typeof genNumber === 'number') {\n            this.objNumber = objNumber;\n            this.genNumber = genNumber;\n            // } else if (typeof objNum === 'string' && typeof genNum === 'string') {\n        }\n        else {\n            this.objNumber = Number(objNumber);\n            this.genNumber = Number(genNumber);\n        }\n    }\n    Object.defineProperty(PdfReference.prototype, \"status\", {\n        //Property\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status3;\n        },\n        set: function (value) {\n            this.status3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving3;\n        },\n        set: function (value) {\n            this.isSaving3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index3;\n        },\n        set: function (value) {\n            this.index3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position3;\n        },\n        set: function (value) {\n            this.position3 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReference.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            var returnObject3 = null;\n            return returnObject3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //IPdfPrimitives methods\n    /**\n     * `Saves` the object.\n     * @private\n     */\n    PdfReference.prototype.save = function (writer) {\n        writer.write(this.toString());\n    };\n    /**\n     * Returns a `string` representing the object.\n     * @private\n     */\n    PdfReference.prototype.toString = function () {\n        return this.objNumber.toString() + ' ' + this.genNumber.toString() + ' R';\n    };\n    /**\n     * Creates a `deep copy` of the IPdfPrimitive object.\n     * @private\n     */\n    PdfReference.prototype.clone = function (crossTable) {\n        return null;\n    };\n    return PdfReference;\n}());\nexport { PdfReference };\n/**\n * `PdfReferenceHolder` class is used to perform reference holder related primitive operations.\n * @private\n */\nvar PdfReferenceHolder = /** @class */ (function () {\n    function PdfReferenceHolder(obj1, obj2) {\n        /**\n         * Holds the `index` number of the object.\n         * @default -1\n         * @private\n         */\n        this.index4 = -1;\n        /**\n         * Internal variable to store the `position`.\n         * @default -1\n         * @private\n         */\n        this.position4 = -1;\n        /**\n         * The `index` of the object within the object collection.\n         * @default -1\n         * @private\n         */\n        this.objectIndex = -1;\n        /**\n         * @hidden\n         * @private\n         */\n        this.dictionaryProperties = new DictionaryProperties();\n        // if (typeof obj2 === 'undefined') {\n        this.initialize(obj1);\n        // }\n        // else {\n        //     if (obj2 === null) {\n        //         throw new Error('ArgumentNullException : crossTable');\n        //     }\n        //     if (obj1 === null) {\n        //         throw new Error('ArgumentNullException : reference');\n        //     }\n        //     this.crossTable = obj2;\n        //     let tempObj1 : PdfReference = <PdfReference>obj1;\n        //     this.reference = tempObj1;\n        // }\n    }\n    Object.defineProperty(PdfReferenceHolder.prototype, \"status\", {\n        //Properties\n        /**\n         * Gets or sets the `Status` of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.status4;\n        },\n        set: function (value) {\n            this.status4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"isSaving\", {\n        /**\n         * Gets or sets a value indicating whether this document `is saving` or not.\n         * @private\n         */\n        get: function () {\n            return this.isSaving4;\n        },\n        set: function (value) {\n            this.isSaving4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"objectCollectionIndex\", {\n        /**\n         * Gets or sets the `index` value of the specified object.\n         * @private\n         */\n        get: function () {\n            return this.index4;\n        },\n        set: function (value) {\n            this.index4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"position\", {\n        /**\n         * Gets or sets the `position` of the object.\n         * @private\n         */\n        get: function () {\n            return this.position4;\n        },\n        set: function (value) {\n            this.position4 = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"clonedObject\", {\n        /**\n         * Returns `cloned object`.\n         * @private\n         */\n        get: function () {\n            return null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"object\", {\n        /**\n         * Gets the `object` the reference is of.\n         * @private\n         */\n        get: function () {\n            // if ((this.reference != null) || (this.object == null)) {\n            //     this.object = this.GetterObject();\n            // }\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"reference\", {\n        /**\n         * Gets the `reference`.\n         * @private\n         */\n        get: function () {\n            return this.pdfReference;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"index\", {\n        /**\n         * Gets the `index` of the object.\n         * @private\n         */\n        get: function () {\n            // let items : PdfMainObjectCollection = this.crossTable.PdfObjects;\n            // this.objectIndex = items.GetObjectIndex(this.reference);\n            // if (this.objectIndex < 0) {\n            //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.reference);\n            //     this.objectIndex = items.Count - 1;\n            // }\n            return this.objectIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfReferenceHolder.prototype, \"element\", {\n        /**\n         * Gets the `element`.\n         * @private\n         */\n        get: function () {\n            return this.primitiveObject;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfReferenceHolder.prototype.initialize = function (obj1) {\n        if (obj1 instanceof PdfArray\n            || obj1 instanceof PdfDictionary\n            || obj1 instanceof PdfName\n            || obj1 instanceof PdfNumber\n            || obj1 instanceof PdfStream\n            || obj1 instanceof PdfReference\n            || obj1 instanceof PdfString) {\n            this.primitiveObject = obj1;\n        }\n        else {\n            var tempObj = obj1;\n            this.initialize(tempObj.element);\n        }\n    };\n    /**\n     * `Writes` a reference into a PDF document.\n     * @private\n     */\n    PdfReferenceHolder.prototype.save = function (writer) {\n        // if (writer == null) {\n        //     throw new Error('ArgumentNullException : writer');\n        // }\n        var position = writer.position;\n        var cTable = writer.document.crossTable;\n        // if (cTable.Document instanceof PdfDocument) {\n        this.object.isSaving = true;\n        // }\n        var reference = null;\n        // if (writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true) {\n        //     if (this.reference === null) {\n        //         reference = cTable.GetReference(this.Object);\n        //     } else {\n        //         reference = this.reference;\n        //     }\n        // } else {\n        //     reference = cTable.GetReference(this.Object);\n        // }\n        // if (!(writer.Document.FileStructure.IncrementalUpdate === true && writer.Document.isStreamCopied === true)) {\n        reference = cTable.getReference(this.object);\n        // }\n        // if (writer.Position !== position) {\n        //     writer.Position = position;\n        // }\n        reference.save(writer);\n    };\n    /**\n     * Creates a `copy of PdfReferenceHolder`.\n     * @private\n     */\n    PdfReferenceHolder.prototype.clone = function (crossTable) {\n        var refHolder = null;\n        var temp = null;\n        var refNum = '';\n        var reference = null;\n        // Restricts addition of same object multiple time.\n        /* if (this.Reference != null && this.crossTable != null && this.crossTable.PageCorrespondance.containsKey(this.Reference)) {\n            refHolder = new PdfReferenceHolder(this.crossTable.PageCorrespondance.getValue(this.Reference) as PdfReference, crossTable);\n            return refHolder;\n        }\n        if (Object instanceof PdfNumber) {\n            return new PdfNumber((Object as PdfNumber).IntValue);\n        }\n        */\n        // if (Object instanceof PdfDictionary) {\n        //     // Meaning the referenced page is not available for import.\n        //     let type : PdfName = new PdfName(this.dictionaryProperties.type);\n        //     let dict : PdfDictionary = Object as PdfDictionary;\n        //     if (dict.ContainsKey(type)) {\n        //         let pageName : PdfName = dict.Items.getValue(type.Value) as PdfName;\n        //         if (pageName !== null) {\n        //             if (pageName.Value === 'Page') {\n        //                 return new PdfNull();\n        //             }\n        //         }\n        //     }\n        // }\n        /* if (Object instanceof PdfName) {\n            return new PdfName ((Object as PdfName ).Value);\n        }\n        */\n        // Resolves circular references.\n        // if (crossTable.PrevReference !== null && (crossTable.PrevReference.indexOf(this.Reference) !== -1)) {\n        //     let obj : IPdfPrimitive = this.crossTable.GetObject(this.Reference).ClonedObject;\n        //     if (obj !== null) {\n        //         reference = crossTable.GetReference(obj);\n        //         return new PdfReferenceHolder(reference, crossTable);\n        //     } else {\n        //         return new PdfNull();\n        //     }\n        // }\n        /*if (this.Reference !== null) {\n            crossTable.PrevReference.push(this.Reference);\n        }\n        reference = crossTable.GetReference(temp);\n        refHolder = new PdfReferenceHolder(reference, crossTable);\n        return refHolder;\n        */\n        return null;\n    };\n    return PdfReferenceHolder;\n}());\nexport { PdfReferenceHolder };\n"]},"metadata":{},"sourceType":"module"}