{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n\n/* eslint-disable jsdoc/require-param */\n\n/* eslint-disable valid-jsdoc */\n\n/**\n * AccumulationChart legend\n */\n\n\nimport { extend, Browser, isNullOrUndefined, Animation } from '@syncfusion/ej2-base';\nimport { pointByIndex } from '../model/acc-base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement, blazorTemplatesReset } from '../../common/utils/helper';\n/**\n * AccumulationLegend module used to render `Legend` for Accumulation chart.\n */\n\nvar AccumulationLegend =\n/** @class */\nfunction (_super) {\n  __extends(AccumulationLegend, _super);\n  /**\n   * Constructor for Accumulation Legend.\n   *\n   * @param {AccumulationChart} chart Get a chart as a parameter.\n   */\n\n\n  function AccumulationLegend(chart) {\n    var _this = _super.call(this, chart) || this;\n\n    _this.library = _this;\n    _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n\n    _this.addEventListener();\n\n    return _this;\n  }\n  /**\n  * Binding events for legend module.\n  */\n\n\n  AccumulationLegend.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on('click', this.click, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n  };\n  /**\n  * UnBinding events for legend module.\n  */\n\n\n  AccumulationLegend.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('click', this.click);\n    this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n  };\n  /**\n  * To handle mosue move for legend module\n  */\n\n\n  AccumulationLegend.prototype.mouseMove = function (e) {\n    if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n      if (this.chart.accumulationHighlightModule && this.chart.highlightMode !== 'None') {\n        this.click(e);\n      }\n    }\n  };\n  /**\n  * To handle mosue end for legend module\n  */\n\n\n  AccumulationLegend.prototype.mouseEnd = function (e) {\n    if (this.chart.legendSettings.visible && this.chart.isTouch) {\n      this.move(e);\n    }\n  };\n  /**\n   * Get the legend options.\n   *\n   * @returns {void} Legend options.\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\n    this.legendCollections = [];\n    this.isRtlEnable = chart.enableRtl;\n    this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n\n    for (var i = 0; i < 1; i++) {\n      var seriesType = series[i].type;\n\n      if (seriesType === 'Pie' || seriesType === 'Doughnut') {\n        seriesType = series[i].innerRadius !== '0' && series[i].innerRadius !== '0%' ? 'Doughnut' : 'Pie';\n      }\n\n      for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n        var point = _a[_i];\n\n        if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n          this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, point.legendImageUrl, null, null, point.index, series[i].index));\n        }\n      }\n\n      if (this.isReverse) {\n        this.legendCollections.reverse();\n      }\n    }\n  };\n  /**\n   * To find legend bounds for accumulation chart.\n   *\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n    this.calculateLegendTitle(legend, legendBounds);\n    this.isTitle = legend.title ? true : false;\n    var extraWidth = 0;\n    var extraHeight = 0;\n    var padding = legend.padding;\n    var titlePosition = legend.titlePosition;\n    var titlePlusArrowSpace = 0;\n    var arrowWidth = this.arrowWidth;\n    var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n\n    if (!this.isVertical) {\n      extraHeight = !legend.height ? availableSize.height / 100 * 5 : 0;\n    } else {\n      extraWidth = !legend.width ? availableSize.width / 100 * 5 : 0;\n    }\n\n    legendBounds.width += extraWidth;\n    legendBounds.height += extraHeight;\n    var shapePadding = legend.shapePadding;\n    var maximumWidth = 0;\n    var shapeWidth = legend.shapeWidth;\n    var rowWidth = 0;\n    var rowCount = 0;\n    var columnWidth = [];\n    var columnHeight = 0;\n    var legendWidth = 0;\n    var titleHeight = 0;\n    this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle).height, legend.shapeHeight);\n    var legendEventArgs;\n    var render = false;\n\n    for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {\n      var legendOption = _a[_i];\n      legendEventArgs = {\n        fill: legendOption.fill,\n        text: legendOption.text,\n        shape: legendOption.shape,\n        name: 'legendRender',\n        cancel: false\n      };\n      this.chart.trigger('legendRender', legendEventArgs);\n      legendOption.render = !legendEventArgs.cancel;\n      legendOption.text = legendEventArgs.text.indexOf('&') > -1 ? this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text;\n      legendOption.fill = legendEventArgs.fill;\n      legendOption.shape = legendEventArgs.shape;\n      legendOption.textSize = measureText(legendOption.text, legend.textStyle);\n\n      if (legendOption.render && legendOption.text !== '') {\n        render = true;\n        legendWidth = shapeWidth + shapePadding + legendOption.textSize.width + padding;\n\n        if (this.isVertical) {\n          ++rowCount;\n          columnHeight = rowCount * (this.maxItemHeight + padding) + padding + this.legendTitleSize.height + arrowHeight;\n\n          if (rowCount * (this.maxItemHeight + padding) + padding + arrowHeight > legendBounds.height) {\n            columnHeight = Math.max(columnHeight, rowCount * (this.maxItemHeight + padding) + padding + arrowHeight);\n            rowWidth = rowWidth + maximumWidth;\n            columnWidth.push(maximumWidth);\n            this.totalPages = Math.max(rowCount, this.totalPages || 1);\n            maximumWidth = 0;\n            rowCount = 1;\n          }\n\n          maximumWidth = Math.max(legendWidth, maximumWidth);\n        } else {\n          if (!legend.enablePages) {\n            // For new legend navigation support\n            titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n            titlePlusArrowSpace += arrowWidth;\n          }\n\n          rowWidth = rowWidth + legendWidth;\n\n          if (legendBounds.width < padding + rowWidth + titlePlusArrowSpace) {\n            maximumWidth = Math.max(maximumWidth, rowWidth + padding + titlePlusArrowSpace - legendWidth);\n\n            if (rowCount === 0 && legendWidth !== rowWidth) {\n              rowCount = 1;\n            }\n\n            rowWidth = legendWidth;\n            rowCount++;\n            columnHeight = rowCount * (this.maxItemHeight + padding) + padding + this.legendTitleSize.height;\n          }\n        }\n      }\n    }\n\n    titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n\n    if (this.isVertical) {\n      rowWidth = rowWidth + maximumWidth;\n      this.isPaging = legendBounds.width < rowWidth + padding;\n      columnHeight = Math.max(columnHeight, (this.totalPages || 1) * (this.maxItemHeight + padding) + padding + arrowHeight);\n      this.isPaging = this.isPaging && this.totalPages > 1;\n\n      if (columnWidth[columnWidth.length - 1] !== maximumWidth) {\n        columnWidth.push(maximumWidth);\n      }\n    } else {\n      this.isPaging = legendBounds.height < columnHeight;\n      columnHeight = !legend.enablePages && this.isPaging ? this.maxItemHeight + padding + padding + titleHeight : columnHeight;\n      this.totalPages = this.totalRowCount = rowCount;\n      columnHeight = Math.max(columnHeight, this.maxItemHeight + padding + padding + titleHeight);\n\n      if (!this.isPaging) {\n        // For title left and right position\n        rowWidth += this.isTitle && titlePosition !== 'Top' ? this.fivePixel + this.legendTitleSize.width + this.fivePixel : 0;\n      }\n    }\n\n    this.maxColumns = 0; // initialization for max columns\n\n    var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) : Math.max(rowWidth + padding, maximumWidth);\n\n    if (render) {\n      // if any legends not skipped in event check\n      this.setBounds(width, columnHeight, legend, legendBounds);\n    } else {\n      this.setBounds(0, 0, legend, legendBounds);\n    }\n  };\n  /**\n   * To find html entities value for legend\n   *\n   * @returns {string} converts the entities to normal string.\n   */\n\n\n  AccumulationLegend.prototype.convertHtmlEntities = function (legendText) {\n    var text = legendText.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n    text = text.replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n    return text;\n  };\n  /**\n   * To find maximum column size for legend\n   *\n   * @returns {number} Get a maximum columns.\n   */\n\n\n  AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n    var maxPageColumn = padding;\n    this.maxColumnWidth = Math.max.apply(null, columns);\n\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n      var column = columns_1[_i];\n      maxPageColumn += this.maxColumnWidth;\n      this.maxColumns++;\n\n      if (maxPageColumn + padding > width) {\n        maxPageColumn -= this.maxColumnWidth;\n        this.maxColumns--;\n        break;\n      }\n    }\n\n    this.isPaging = maxPageColumn < rowWidth && this.totalPages > 1;\n\n    if (maxPageColumn === padding) {\n      maxPageColumn = width;\n    }\n\n    this.maxColumns = Math.max(1, this.maxColumns);\n    this.maxWidth = maxPageColumn;\n    return maxPageColumn;\n  };\n  /**\n   * To find available width from legend x position.\n   *\n   * @returns {number} Get a available width.\n   */\n\n\n  AccumulationLegend.prototype.getAvailWidth = function (tx, width) {\n    if (this.isVertical) {\n      width = this.maxWidth;\n    }\n\n    return width - (this.legend.padding * 2 + this.legend.shapeWidth + this.legend.shapePadding);\n  };\n  /**\n   * To find legend rendering locations from legend options.\n   *\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n    var padding = this.legend.padding;\n\n    if (this.isVertical) {\n      if (count === firstLegend || prevLegend.location.y + this.maxItemHeight * 1.5 + padding * 2 > rect.y + rect.height) {\n        legendOption.location.x = prevLegend.location.x + (count === firstLegend ? 0 : !this.isRtlEnable ? this.maxColumnWidth : -this.maxColumnWidth);\n        legendOption.location.y = start.y;\n        var textStartLoc = this.legend.shapeWidth / 2 + padding;\n        this.pageXCollections.push(legendOption.location.x + (!this.isRtlEnable ? -textStartLoc : textStartLoc));\n        this.totalPages++;\n      } else {\n        legendOption.location.x = prevLegend.location.x;\n        legendOption.location.y = prevLegend.location.y + this.maxItemHeight + padding;\n      }\n    } else {\n      var textWidth = textPadding + prevLegend.textSize.width;\n      var previousBound = prevLegend.location.x + (!this.isRtlEnable ? textWidth : -textWidth);\n\n      if (this.isWithinBounds(previousBound, legendOption.textSize.width + textPadding, rect, this.legend.shapeWidth / 2)) {\n        legendOption.location.y = count === firstLegend ? prevLegend.location.y : prevLegend.location.y + this.maxItemHeight + padding;\n        legendOption.location.x = start.x;\n      } else {\n        legendOption.location.y = prevLegend.location.y;\n        legendOption.location.x = count === firstLegend ? prevLegend.location.x : previousBound;\n      }\n\n      this.totalPages = this.totalRowCount;\n    }\n\n    var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n    legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle);\n  };\n  /**\n  * check whether legend group within legend bounds or not.\n  *\n  */\n\n\n  AccumulationLegend.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n    if (!this.isRtlEnable) {\n      return previousBound + textWidth > legendBounds.x + legendBounds.width + shapeWidth;\n    } else {\n      return previousBound - textWidth < legendBounds.x - shapeWidth;\n    }\n  };\n  /**\n   * finding the smart legend place according to positions.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n    var space;\n\n    switch (this.position) {\n      case 'Left':\n        space = (labelBound.x - legendBound.width - margin.left) / 2;\n        legendBound.x = labelBound.x - legendBound.width < margin.left ? legendBound.x : labelBound.x - legendBound.width - space;\n        break;\n\n      case 'Right':\n        space = (this.chart.availableSize.width - margin.right - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n        legendBound.x = labelBound.x + labelBound.width + legendBound.width > this.chart.availableSize.width - margin.right ? legendBound.x : labelBound.x + labelBound.width + space;\n        break;\n\n      case 'Top':\n        this.getTitleRect(this.chart);\n        space = (labelBound.y - legendBound.height - (this.titleRect.y + this.titleRect.height)) / 2;\n        legendBound.y = labelBound.y - legendBound.height < margin.top ? legendBound.y : labelBound.y - legendBound.height - space;\n        break;\n\n      case 'Bottom':\n        space = (this.chart.availableSize.height - margin.bottom - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n        legendBound.y = labelBound.y + labelBound.height + legendBound.height > this.chart.availableSize.height - margin.bottom ? legendBound.y : labelBound.y + labelBound.height + space;\n        break;\n    }\n  };\n  /**\n   * To get title rect.\n   *\n   * @returns {void} Get a title rect.\n   */\n\n\n  AccumulationLegend.prototype.getTitleRect = function (accumulation) {\n    if (!accumulation.title) {\n      return null;\n    }\n\n    var titleSize = measureText(accumulation.title, accumulation.titleStyle);\n    this.titleRect = new Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\n  };\n  /**\n   * To get legend by index\n   *\n   * @returns {LegendOptions} Return legend index.\n   */\n\n\n  AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\n    for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n      var legend = legendCollections_1[_i];\n\n      if (legend.pointIndex === index) {\n        return legend;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * To show or hide the legend on clicking the legend.\n   *\n   * @returns {void}\n   */\n\n\n  AccumulationLegend.prototype.click = function (event) {\n    var targetId = event.target.id;\n    var chart = this.chart;\n    var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n\n    if (this.chart.accumulationSelectionModule) {\n      var selectedDataIndexes = extend([], this.chart.accumulationSelectionModule.selectedDataIndexes, null, true);\n    }\n\n    this.chart.animateSeries = false;\n\n    for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n      var id = legendItemsId_1[_i];\n\n      if (targetId.indexOf(id) > -1) {\n        var pointIndex = parseInt(targetId.split(id)[1], 10);\n\n        if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n          var currentSeries = this.chart.visibleSeries[0];\n          var point = pointByIndex(pointIndex, currentSeries.points);\n          var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n          point.visible = !point.visible;\n          legendOption.visible = point.visible;\n          currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n          chart.redraw = chart.enableAnimation;\n          this.sliceVisibility(pointIndex, point.visible);\n          chart.removeSvg(); //To remove the blazor templates\n\n          blazorTemplatesReset(chart);\n          this.chart.refreshPoints(currentSeries.points);\n          this.chart.renderElements();\n        } else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\n          this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex, event);\n        } else if (this.chart.accumulationHighlightModule && !isNaN(pointIndex)) {\n          this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, pointIndex, event);\n        }\n      }\n    }\n\n    if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n      this.changePage(event, true);\n    } else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n      this.changePage(event, false);\n    }\n\n    chart.redraw = false;\n  };\n  /**\n   * To translate the point elements by index and position\n   */\n\n\n  AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\n    var sliceId = this.chart.element.id + '_Series_0_Point_';\n\n    if (this.chart.visibleSeries[0].dataLabel.visible) {\n      sliceId = this.chart.element.id + '_datalabel_Series_0_';\n      this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n    }\n  };\n  /**\n   * Slice animation\n   *\n   * @param {Element} element slice element.\n   * @param {boolean} isVisible boolean value of slice.\n   * @returns {void} slice animation method.\n   */\n\n\n  AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\n    if (!element) {\n      return null;\n    }\n\n    new Animation({}).animate(element, {\n      duration: 300,\n      delay: 0,\n      name: isVisible ? 'FadeIn' : 'FadeOut',\n      end: function (args) {\n        args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n      }\n    });\n  };\n  /**\n   * Get module name\n   *\n   * @returns {string} Return module name.\n   */\n\n\n  AccumulationLegend.prototype.getModuleName = function () {\n    return 'AccumulationLegend';\n  };\n  /**\n   * To destroy the Legend.\n   *\n   * @returns {void}\n   * @private\n   */\n\n\n  AccumulationLegend.prototype.destroy = function () {\n    /**\n     * Destroy method calling here\n     */\n    this.removeEventListener();\n  };\n\n  return AccumulationLegend;\n}(BaseLegend);\n\nexport { AccumulationLegend };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/legend.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","extend","Browser","isNullOrUndefined","Animation","pointByIndex","BaseLegend","LegendOptions","Rect","measureText","textTrim","getElement","blazorTemplatesReset","AccumulationLegend","_super","chart","_this","call","library","titleRect","margin","top","addEventListener","isDestroyed","on","touchMoveEvent","mouseMove","click","touchEndEvent","mouseEnd","removeEventListener","off","e","legendSettings","visible","isTouch","accumulationHighlightModule","highlightMode","move","getLegendOptions","series","legendCollections","isRtlEnable","enableRtl","isReverse","reverse","i","seriesType","type","innerRadius","_i","_a","points","length","point","x","y","push","toString","color","legendShape","legendImageUrl","index","getLegendBounds","availableSize","legendBounds","legend","calculateLegendTitle","isTitle","title","extraWidth","extraHeight","padding","titlePosition","titlePlusArrowSpace","arrowWidth","arrowHeight","enablePages","isVertical","height","width","shapePadding","maximumWidth","shapeWidth","rowWidth","rowCount","columnWidth","columnHeight","legendWidth","titleHeight","maxItemHeight","Math","max","textStyle","shapeHeight","legendEventArgs","render","legendOption","fill","text","shape","name","cancel","trigger","indexOf","convertHtmlEntities","textSize","legendTitleSize","totalPages","fivePixel","isPaging","totalRowCount","maxColumns","getMaxColumn","setBounds","legendText","replace","columns","maxPageColumn","maxColumnWidth","apply","columns_1","column","maxWidth","getAvailWidth","tx","getRenderPoint","start","textPadding","prevLegend","rect","count","firstLegend","location","textStartLoc","pageXCollections","textWidth","previousBound","isWithinBounds","availablewidth","toFixed","getSmartLegendLocation","labelBound","legendBound","space","position","left","right","getTitleRect","bottom","accumulation","titleSize","titleStyle","legendByIndex","legendCollections_1","pointIndex","event","targetId","target","id","legendItemsId","legendID","accumulationSelectionModule","selectedDataIndexes","animateSeries","legendItemsId_1","parseInt","split","toggleVisibility","isNaN","currentSeries","visibleSeries","sumOfPoints","redraw","enableAnimation","sliceVisibility","removeSvg","refreshPoints","renderElements","legendSelection","changePage","isVisible","sliceId","element","dataLabel","sliceAnimate","animate","duration","delay","end","args","style","visibility","getModuleName","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/**\n * AccumulationChart legend\n */\nimport { extend, Browser, isNullOrUndefined, Animation } from '@syncfusion/ej2-base';\nimport { pointByIndex } from '../model/acc-base';\nimport { BaseLegend, LegendOptions } from '../../common/legend/legend';\nimport { Rect, measureText } from '@syncfusion/ej2-svg-base';\nimport { textTrim, getElement, blazorTemplatesReset } from '../../common/utils/helper';\n/**\n * AccumulationLegend module used to render `Legend` for Accumulation chart.\n */\nvar AccumulationLegend = /** @class */ (function (_super) {\n    __extends(AccumulationLegend, _super);\n    /**\n     * Constructor for Accumulation Legend.\n     *\n     * @param {AccumulationChart} chart Get a chart as a parameter.\n     */\n    function AccumulationLegend(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.library = _this;\n        _this.titleRect = new Rect(0, chart.margin.top, 0, 0);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n    * Binding events for legend module.\n    */\n    AccumulationLegend.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on('click', this.click, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseEnd, this);\n    };\n    /**\n    * UnBinding events for legend module.\n    */\n    AccumulationLegend.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('click', this.click);\n        this.chart.off(Browser.touchEndEvent, this.mouseEnd);\n    };\n    /**\n    * To handle mosue move for legend module\n    */\n    AccumulationLegend.prototype.mouseMove = function (e) {\n        if (this.chart.legendSettings.visible && !this.chart.isTouch) {\n            if (this.chart.accumulationHighlightModule && this.chart.highlightMode !== 'None') {\n                this.click(e);\n            }\n        }\n    };\n    /**\n    * To handle mosue end for legend module\n    */\n    AccumulationLegend.prototype.mouseEnd = function (e) {\n        if (this.chart.legendSettings.visible && this.chart.isTouch) {\n            this.move(e);\n        }\n    };\n    /**\n     * Get the legend options.\n     *\n     * @returns {void} Legend options.\n     * @private\n     */\n    AccumulationLegend.prototype.getLegendOptions = function (chart, series) {\n        this.legendCollections = [];\n        this.isRtlEnable = chart.enableRtl;\n        this.isReverse = !this.isRtlEnable && chart.legendSettings.reverse;\n        for (var i = 0; i < 1; i++) {\n            var seriesType = series[i].type;\n            if (seriesType === 'Pie' || seriesType === 'Doughnut') {\n                seriesType = (series[i].innerRadius !== '0' && series[i].innerRadius !== '0%') ?\n                    'Doughnut' : 'Pie';\n            }\n            for (var _i = 0, _a = series[i].points; _i < _a.length; _i++) {\n                var point = _a[_i];\n                if (!isNullOrUndefined(point.x) && !isNullOrUndefined(point.y)) {\n                    this.legendCollections.push(new LegendOptions(point.x.toString(), point.color, series[i].legendShape, point.visible, seriesType, point.legendImageUrl, null, null, point.index, series[i].index));\n                }\n            }\n            if (this.isReverse) {\n                this.legendCollections.reverse();\n            }\n        }\n    };\n    /**\n     * To find legend bounds for accumulation chart.\n     *\n     * @private\n     */\n    AccumulationLegend.prototype.getLegendBounds = function (availableSize, legendBounds, legend) {\n        this.calculateLegendTitle(legend, legendBounds);\n        this.isTitle = legend.title ? true : false;\n        var extraWidth = 0;\n        var extraHeight = 0;\n        var padding = legend.padding;\n        var titlePosition = legend.titlePosition;\n        var titlePlusArrowSpace = 0;\n        var arrowWidth = this.arrowWidth;\n        var arrowHeight = legend.enablePages ? 0 : this.arrowHeight;\n        if (!this.isVertical) {\n            extraHeight = !legend.height ? ((availableSize.height / 100) * 5) : 0;\n        }\n        else {\n            extraWidth = !legend.width ? ((availableSize.width / 100) * 5) : 0;\n        }\n        legendBounds.width += extraWidth;\n        legendBounds.height += extraHeight;\n        var shapePadding = legend.shapePadding;\n        var maximumWidth = 0;\n        var shapeWidth = legend.shapeWidth;\n        var rowWidth = 0;\n        var rowCount = 0;\n        var columnWidth = [];\n        var columnHeight = 0;\n        var legendWidth = 0;\n        var titleHeight = 0;\n        this.maxItemHeight = Math.max(measureText('MeasureText', legend.textStyle).height, legend.shapeHeight);\n        var legendEventArgs;\n        var render = false;\n        for (var _i = 0, _a = this.legendCollections; _i < _a.length; _i++) {\n            var legendOption = _a[_i];\n            legendEventArgs = { fill: legendOption.fill, text: legendOption.text, shape: legendOption.shape,\n                name: 'legendRender', cancel: false };\n            this.chart.trigger('legendRender', legendEventArgs);\n            legendOption.render = !legendEventArgs.cancel;\n            legendOption.text = ((legendEventArgs.text.indexOf('&') > -1) ?\n                this.convertHtmlEntities(legendEventArgs.text) : legendEventArgs.text);\n            legendOption.fill = legendEventArgs.fill;\n            legendOption.shape = legendEventArgs.shape;\n            legendOption.textSize = measureText(legendOption.text, legend.textStyle);\n            if (legendOption.render && legendOption.text !== '') {\n                render = true;\n                legendWidth = shapeWidth + shapePadding + legendOption.textSize.width + padding;\n                if (this.isVertical) {\n                    ++rowCount;\n                    columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding + this.legendTitleSize.height + arrowHeight;\n                    if ((rowCount * (this.maxItemHeight + padding)) + padding + arrowHeight > legendBounds.height) {\n                        columnHeight = Math.max(columnHeight, (rowCount * (this.maxItemHeight + padding)) + padding + arrowHeight);\n                        rowWidth = rowWidth + maximumWidth;\n                        columnWidth.push(maximumWidth);\n                        this.totalPages = Math.max(rowCount, this.totalPages || 1);\n                        maximumWidth = 0;\n                        rowCount = 1;\n                    }\n                    maximumWidth = Math.max(legendWidth, maximumWidth);\n                }\n                else {\n                    if (!legend.enablePages) { // For new legend navigation support\n                        titlePlusArrowSpace = this.isTitle && titlePosition !== 'Top' ? this.legendTitleSize.width + this.fivePixel : 0;\n                        titlePlusArrowSpace += arrowWidth;\n                    }\n                    rowWidth = rowWidth + legendWidth;\n                    if (legendBounds.width < (padding + rowWidth + titlePlusArrowSpace)) {\n                        maximumWidth = Math.max(maximumWidth, (rowWidth + padding + titlePlusArrowSpace - legendWidth));\n                        if (rowCount === 0 && (legendWidth !== rowWidth)) {\n                            rowCount = 1;\n                        }\n                        rowWidth = legendWidth;\n                        rowCount++;\n                        columnHeight = (rowCount * (this.maxItemHeight + padding)) + padding + this.legendTitleSize.height;\n                    }\n                }\n            }\n        }\n        titleHeight = titlePosition === 'Top' ? this.legendTitleSize.height : 0;\n        if (this.isVertical) {\n            rowWidth = rowWidth + maximumWidth;\n            this.isPaging = legendBounds.width < (rowWidth + padding);\n            columnHeight = Math.max(columnHeight, ((this.totalPages || 1) * (this.maxItemHeight + padding)) + padding + arrowHeight);\n            this.isPaging = this.isPaging && (this.totalPages > 1);\n            if (columnWidth[columnWidth.length - 1] !== maximumWidth) {\n                columnWidth.push(maximumWidth);\n            }\n        }\n        else {\n            this.isPaging = legendBounds.height < columnHeight;\n            columnHeight = !legend.enablePages && this.isPaging ? (this.maxItemHeight + padding) + padding + titleHeight : columnHeight;\n            this.totalPages = this.totalRowCount = rowCount;\n            columnHeight = Math.max(columnHeight, (this.maxItemHeight + padding) + padding + titleHeight);\n            if (!this.isPaging) { // For title left and right position\n                rowWidth += this.isTitle && titlePosition !== 'Top' ? (this.fivePixel + this.legendTitleSize.width + this.fivePixel) : 0;\n            }\n        }\n        this.maxColumns = 0; // initialization for max columns\n        var width = this.isVertical ? this.getMaxColumn(columnWidth, legendBounds.width, padding, rowWidth + padding) :\n            Math.max(rowWidth + padding, maximumWidth);\n        if (render) { // if any legends not skipped in event check\n            this.setBounds(width, columnHeight, legend, legendBounds);\n        }\n        else {\n            this.setBounds(0, 0, legend, legendBounds);\n        }\n    };\n    /**\n     * To find html entities value for legend\n     *\n     * @returns {string} converts the entities to normal string.\n     */\n    AccumulationLegend.prototype.convertHtmlEntities = function (legendText) {\n        var text = (legendText).replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&nbsp;', ' ').replace('&cent;', '¢').replace('&pound;', '£').replace('&yen;', '¥').replace('&euro;', '€').replace('&copy;', '©').replace('&reg;', '®');\n        text = (text).replace('&#38;', '&').replace('&#60;', '<').replace('&#62;', '>').replace('&#34;', '\"').replace('&#160;', ' ').\n            replace('&#162;', '¢').replace('&#163;', '£').replace('&#165;', '¥').replace('&#8364;', '€').replace('&#169;', '©').replace('&#174;', '®');\n        return text;\n    };\n    /**\n     * To find maximum column size for legend\n     *\n     * @returns {number} Get a maximum columns.\n     */\n    AccumulationLegend.prototype.getMaxColumn = function (columns, width, padding, rowWidth) {\n        var maxPageColumn = padding;\n        this.maxColumnWidth = Math.max.apply(null, columns);\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var column = columns_1[_i];\n            maxPageColumn += this.maxColumnWidth;\n            this.maxColumns++;\n            if (maxPageColumn + padding > width) {\n                maxPageColumn -= this.maxColumnWidth;\n                this.maxColumns--;\n                break;\n            }\n        }\n        this.isPaging = (maxPageColumn < rowWidth) && (this.totalPages > 1);\n        if (maxPageColumn === padding) {\n            maxPageColumn = width;\n        }\n        this.maxColumns = Math.max(1, this.maxColumns);\n        this.maxWidth = maxPageColumn;\n        return maxPageColumn;\n    };\n    /**\n     * To find available width from legend x position.\n     *\n     * @returns {number} Get a available width.\n     */\n    AccumulationLegend.prototype.getAvailWidth = function (tx, width) {\n        if (this.isVertical) {\n            width = this.maxWidth;\n        }\n        return width - ((this.legend.padding * 2) + this.legend.shapeWidth + this.legend.shapePadding);\n    };\n    /**\n     * To find legend rendering locations from legend options.\n     *\n     * @private\n     */\n    AccumulationLegend.prototype.getRenderPoint = function (legendOption, start, textPadding, prevLegend, rect, count, firstLegend) {\n        var padding = this.legend.padding;\n        if (this.isVertical) {\n            if (count === firstLegend || (prevLegend.location.y + (this.maxItemHeight * 1.5) + (padding * 2) > rect.y + rect.height)) {\n                legendOption.location.x = prevLegend.location.x + ((count === firstLegend) ? 0 : (!this.isRtlEnable) ? this.maxColumnWidth : -this.maxColumnWidth);\n                legendOption.location.y = start.y;\n                var textStartLoc = (this.legend.shapeWidth / 2) + padding;\n                this.pageXCollections.push(legendOption.location.x + ((!this.isRtlEnable) ? -textStartLoc : textStartLoc));\n                this.totalPages++;\n            }\n            else {\n                legendOption.location.x = prevLegend.location.x;\n                legendOption.location.y = prevLegend.location.y + this.maxItemHeight + padding;\n            }\n        }\n        else {\n            var textWidth = textPadding + prevLegend.textSize.width;\n            var previousBound = prevLegend.location.x + ((!this.isRtlEnable) ? textWidth : -textWidth);\n            if (this.isWithinBounds(previousBound, legendOption.textSize.width + textPadding, rect, this.legend.shapeWidth / 2)) {\n                legendOption.location.y = (count === firstLegend) ? prevLegend.location.y :\n                    prevLegend.location.y + this.maxItemHeight + padding;\n                legendOption.location.x = start.x;\n            }\n            else {\n                legendOption.location.y = prevLegend.location.y;\n                legendOption.location.x = (count === firstLegend) ? prevLegend.location.x : previousBound;\n            }\n            this.totalPages = this.totalRowCount;\n        }\n        var availablewidth = this.getAvailWidth(legendOption.location.x, this.legendBounds.width);\n        legendOption.text = textTrim(+availablewidth.toFixed(4), legendOption.text, this.legend.textStyle);\n    };\n    /**\n    * check whether legend group within legend bounds or not.\n    *\n    */\n    AccumulationLegend.prototype.isWithinBounds = function (previousBound, textWidth, legendBounds, shapeWidth) {\n        if (!this.isRtlEnable) {\n            return (previousBound + textWidth) > (legendBounds.x + legendBounds.width + shapeWidth);\n        }\n        else {\n            return (previousBound - textWidth) < (legendBounds.x - shapeWidth);\n        }\n    };\n    /**\n     * finding the smart legend place according to positions.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.getSmartLegendLocation = function (labelBound, legendBound, margin) {\n        var space;\n        switch (this.position) {\n            case 'Left':\n                space = ((labelBound.x - legendBound.width) - margin.left) / 2;\n                legendBound.x = (labelBound.x - legendBound.width) < margin.left ? legendBound.x :\n                    (labelBound.x - legendBound.width) - space;\n                break;\n            case 'Right':\n                space = ((this.chart.availableSize.width - margin.right) - (labelBound.x + labelBound.width + legendBound.width)) / 2;\n                legendBound.x = (labelBound.x + labelBound.width + legendBound.width) > (this.chart.availableSize.width - margin.right) ?\n                    legendBound.x : (labelBound.x + labelBound.width + space);\n                break;\n            case 'Top':\n                this.getTitleRect(this.chart);\n                space = ((labelBound.y - legendBound.height) - (this.titleRect.y + this.titleRect.height)) / 2;\n                legendBound.y = (labelBound.y - legendBound.height) < margin.top ? legendBound.y :\n                    (labelBound.y - legendBound.height) - space;\n                break;\n            case 'Bottom':\n                space = ((this.chart.availableSize.height - margin.bottom) - (labelBound.y + labelBound.height + legendBound.height)) / 2;\n                legendBound.y = labelBound.y + labelBound.height + legendBound.height > (this.chart.availableSize.height - margin.bottom) ?\n                    legendBound.y : (labelBound.y + labelBound.height) + space;\n                break;\n        }\n    };\n    /**\n     * To get title rect.\n     *\n     * @returns {void} Get a title rect.\n     */\n    AccumulationLegend.prototype.getTitleRect = function (accumulation) {\n        if (!accumulation.title) {\n            return null;\n        }\n        var titleSize = measureText(accumulation.title, accumulation.titleStyle);\n        this.titleRect = new Rect(accumulation.availableSize.width / 2 - titleSize.width / 2, accumulation.margin.top, titleSize.width, titleSize.height);\n    };\n    /**\n     * To get legend by index\n     *\n     * @returns {LegendOptions} Return legend index.\n     */\n    AccumulationLegend.prototype.legendByIndex = function (index, legendCollections) {\n        for (var _i = 0, legendCollections_1 = legendCollections; _i < legendCollections_1.length; _i++) {\n            var legend = legendCollections_1[_i];\n            if (legend.pointIndex === index) {\n                return legend;\n            }\n        }\n        return null;\n    };\n    /**\n     * To show or hide the legend on clicking the legend.\n     *\n     * @returns {void}\n     */\n    AccumulationLegend.prototype.click = function (event) {\n        var targetId = event.target.id;\n        var chart = this.chart;\n        var legendItemsId = [this.legendID + '_text_', this.legendID + '_shape_', this.legendID + '_shape_marker_'];\n        if (this.chart.accumulationSelectionModule) {\n            var selectedDataIndexes = extend([], this.chart.accumulationSelectionModule.selectedDataIndexes, null, true);\n        }\n        this.chart.animateSeries = false;\n        for (var _i = 0, legendItemsId_1 = legendItemsId; _i < legendItemsId_1.length; _i++) {\n            var id = legendItemsId_1[_i];\n            if (targetId.indexOf(id) > -1) {\n                var pointIndex = parseInt(targetId.split(id)[1], 10);\n                if (this.chart.legendSettings.toggleVisibility && !isNaN(pointIndex)) {\n                    var currentSeries = this.chart.visibleSeries[0];\n                    var point = pointByIndex(pointIndex, currentSeries.points);\n                    var legendOption = this.legendByIndex(pointIndex, this.legendCollections);\n                    point.visible = !point.visible;\n                    legendOption.visible = point.visible;\n                    currentSeries.sumOfPoints += point.visible ? point.y : -point.y;\n                    chart.redraw = chart.enableAnimation;\n                    this.sliceVisibility(pointIndex, point.visible);\n                    chart.removeSvg();\n                    //To remove the blazor templates\n                    blazorTemplatesReset(chart);\n                    this.chart.refreshPoints(currentSeries.points);\n                    this.chart.renderElements();\n                }\n                else if (this.chart.accumulationSelectionModule && !isNaN(pointIndex)) {\n                    this.chart.accumulationSelectionModule.legendSelection(this.chart, 0, pointIndex, event);\n                }\n                else if (this.chart.accumulationHighlightModule && !isNaN(pointIndex)) {\n                    this.chart.accumulationHighlightModule.legendSelection(this.chart, 0, pointIndex, event);\n                }\n            }\n        }\n        if (targetId.indexOf(this.legendID + '_pageup') > -1) {\n            this.changePage(event, true);\n        }\n        else if (targetId.indexOf(this.legendID + '_pagedown') > -1) {\n            this.changePage(event, false);\n        }\n        chart.redraw = false;\n    };\n    /**\n     * To translate the point elements by index and position\n     */\n    AccumulationLegend.prototype.sliceVisibility = function (index, isVisible) {\n        var sliceId = this.chart.element.id + '_Series_0_Point_';\n        if (this.chart.visibleSeries[0].dataLabel.visible) {\n            sliceId = this.chart.element.id + '_datalabel_Series_0_';\n            this.sliceAnimate(getElement(sliceId + 'g_' + index), isVisible);\n        }\n    };\n    /**\n     * Slice animation\n     *\n     * @param {Element} element slice element.\n     * @param {boolean} isVisible boolean value of slice.\n     * @returns {void} slice animation method.\n     */\n    AccumulationLegend.prototype.sliceAnimate = function (element, isVisible) {\n        if (!element) {\n            return null;\n        }\n        new Animation({}).animate(element, {\n            duration: 300,\n            delay: 0,\n            name: isVisible ? 'FadeIn' : 'FadeOut',\n            end: function (args) {\n                args.element.style.visibility = isVisible ? 'visible' : 'hidden';\n            }\n        });\n    };\n    /**\n     * Get module name\n     *\n     * @returns {string} Return module name.\n     */\n    AccumulationLegend.prototype.getModuleName = function () {\n        return 'AccumulationLegend';\n    };\n    /**\n     * To destroy the Legend.\n     *\n     * @returns {void}\n     * @private\n     */\n    AccumulationLegend.prototype.destroy = function () {\n        /**\n         * Destroy method calling here\n         */\n        this.removeEventListener();\n    };\n    return AccumulationLegend;\n}(BaseLegend));\nexport { AccumulationLegend };\n"]},"metadata":{},"sourceType":"module"}