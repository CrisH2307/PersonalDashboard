{"ast":null,"code":"import { PdfGridCell, PdfGridCellCollection } from './pdf-grid-cell';\nimport { PdfGridRowStyle } from './styles/style';\n/**\n * `PdfGridRow` class provides customization of the settings for the particular row.\n */\n\nvar PdfGridRow =\n/** @class */\nfunction () {\n  //Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridRow` class with the parent grid.\n   * @private\n   */\n  function PdfGridRow(grid) {\n    /**\n     * Stores the index of the overflowing row.\n     * @private\n     */\n    this.gridRowOverflowIndex = 0;\n    /**\n     * The `height` of the row.\n     * @private\n     */\n\n    this.rowHeight = 0;\n    /**\n     * The `width` of the row.\n     * @private\n     */\n\n    this.rowWidth = 0;\n    /**\n     * The `isFinish` of the row.\n     * @private\n     */\n\n    this.isrowFinish = false;\n    /**\n     * Check whether the Row span row height `is set explicitly`.\n     * @default false\n     * @public\n     */\n\n    this.isRowSpanRowHeightSet = false;\n    /**\n     * The `page count` of the row.\n     * @public\n     */\n\n    this.noOfPageCount = 0;\n    /**\n     * Check whether the row height `is set explicitly`.\n     * @default false\n     * @private\n     */\n\n    this.isRowHeightSet = false;\n    this.isPageBreakRowSpanApplied = false;\n    /**\n     * Check weather the row merge `is completed` or not.\n     * @default true\n     * @private\n     */\n\n    this.isRowMergeComplete = true;\n    this.repeatFlag = false;\n    this.rowFontSplit = false;\n    this.isHeaderRow = false;\n    this.pdfGrid = grid;\n  }\n\n  Object.defineProperty(PdfGridRow.prototype, \"rowSpanExists\", {\n    //Properties\n\n    /**\n     * Gets or sets a value indicating [`row span exists`].\n     * @private\n     */\n    get: function () {\n      return this.bRowSpanExists;\n    },\n    set: function (value) {\n      this.bRowSpanExists = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"cells\", {\n    /**\n     * Gets the `cells` from the selected row.[Read-Only].\n     * @private\n     */\n    get: function () {\n      if (this.gridCells == null) {\n        this.gridCells = new PdfGridCellCollection(this);\n      }\n\n      return this.gridCells;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"grid\", {\n    /**\n     * Gets or sets the parent `grid`.\n     * @private\n     */\n    get: function () {\n      return this.pdfGrid;\n    },\n    set: function (value) {\n      this.pdfGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"style\", {\n    /**\n     * Gets or sets the row `style`.\n     * @private\n     */\n    get: function () {\n      if (typeof this.rowStyle === 'undefined') {\n        this.rowStyle = new PdfGridRowStyle();\n        this.rowStyle.setParent(this);\n      }\n\n      return this.rowStyle;\n    },\n    set: function (value) {\n      this.rowStyle = value;\n\n      for (var i = 0; i < this.cells.count; i++) {\n        this.cells.getCell(i).style.borders = value.border;\n\n        if (typeof value.font !== 'undefined') {\n          this.cells.getCell(i).style.font = value.font;\n        }\n\n        if (typeof value.backgroundBrush !== 'undefined') {\n          this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\n        }\n\n        if (typeof value.backgroundImage !== 'undefined') {\n          this.cells.getCell(i).style.backgroundImage = value.backgroundImage;\n        }\n\n        if (typeof value.textBrush !== 'undefined') {\n          this.cells.getCell(i).style.textBrush = value.textBrush;\n        }\n\n        if (typeof value.textPen !== 'undefined') {\n          this.cells.getCell(i).style.textPen = value.textPen;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowBreakHeight\", {\n    /**\n     * `Height` of the row yet to be drawn after split.\n     * @private\n     */\n    get: function () {\n      if (typeof this.gridRowBreakHeight === 'undefined') {\n        this.gridRowBreakHeight = 0;\n      }\n\n      return this.gridRowBreakHeight;\n    },\n    set: function (value) {\n      this.gridRowBreakHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowOverflowIndex\", {\n    /**\n     * `over flow index` of the row.\n     * @private\n     */\n    get: function () {\n      return this.gridRowOverflowIndex;\n    },\n    set: function (value) {\n      this.gridRowOverflowIndex = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"height\", {\n    /**\n     * Gets or sets the `height` of the row.\n     * @private\n     */\n    get: function () {\n      if (!this.isRowHeightSet) {\n        this.rowHeight = this.measureHeight();\n      }\n\n      return this.rowHeight;\n    },\n    set: function (value) {\n      this.rowHeight = value;\n      this.isRowHeightSet = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"width\", {\n    /**\n     * Gets or sets the `width` of the row.\n     * @private\n     */\n    get: function () {\n      if (this.rowWidth === 0 || typeof this.rowWidth === 'undefined') {\n        this.rowWidth = this.measureWidth();\n      }\n\n      return this.rowWidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"NestedGridLayoutResult\", {\n    /**\n     * Gets or sets the row `Nested grid Layout Result`.\n     * @private\n     */\n    get: function () {\n      return this.gridResult;\n    },\n    set: function (value) {\n      this.gridResult = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"columnSpanExists\", {\n    /**\n     * Gets or sets a value indicating [`column span exists`].\n     * @private\n     */\n    get: function () {\n      return this.bColumnSpanExists;\n    },\n    set: function (value) {\n      this.bColumnSpanExists = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowMergeComplete\", {\n    /**\n     * Check whether the Row `has row span or row merge continue`.\n     * @private\n     */\n    get: function () {\n      return this.isRowMergeComplete;\n    },\n    set: function (value) {\n      this.isRowMergeComplete = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRow.prototype, \"rowIndex\", {\n    /**\n     * Returns `index` of the row.\n     * @private\n     */\n    get: function () {\n      return this.grid.rows.rowCollection.indexOf(this);\n    },\n    enumerable: true,\n    configurable: true\n  }); //Implementation\n\n  /**\n   * `Calculates the height`.\n   * @private\n   */\n\n  PdfGridRow.prototype.measureHeight = function () {\n    var rowSpanRemainingHeight = 0;\n    var rowHeight;\n    var maxHeight = 0;\n\n    if (this.cells.getCell(0).rowSpan > 1) {\n      rowHeight = 0;\n    } else {\n      rowHeight = this.cells.getCell(0).height;\n    }\n\n    for (var i = 0; i < this.cells.count; i++) {\n      var cell = this.cells.getCell(i); //get the maximum rowspan remaining height.\n\n      if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\n        rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\n      } //skip the cell if row spanned.\n      // if (cell.isRowMergeContinue) {\n      //     continue;\n      // }\n      // if (!cell.isRowMergeContinue) {\n      //     this.rowMergeComplete = false;\n      // }\n\n\n      this.rowMergeComplete = false;\n\n      if (cell.rowSpan > 1) {\n        var cellIn = i;\n        var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);\n\n        for (var j = 0; j < cell.rowSpan; j++) {\n          if (j + 1 < cell.rowSpan) {\n            (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;\n          }\n        }\n\n        if (maxHeight < cell.height) {\n          maxHeight = cell.height;\n        }\n\n        continue;\n      }\n\n      rowHeight = Math.max(rowHeight, cell.height);\n    }\n\n    if (maxHeight > rowHeight) {\n      rowHeight = maxHeight;\n    }\n\n    if (rowHeight === 0) {\n      rowHeight = maxHeight;\n    } else if (rowSpanRemainingHeight > 0) {\n      rowHeight += rowSpanRemainingHeight;\n    }\n\n    return rowHeight;\n  };\n\n  PdfGridRow.prototype.measureWidth = function () {\n    var rowWid = 0;\n\n    for (var i = 0; i < this.grid.columns.count; i++) {\n      var column = this.grid.columns.getColumn(i);\n      rowWid += column.width;\n    }\n\n    return rowWid;\n  };\n\n  return PdfGridRow;\n}();\n\nexport { PdfGridRow };\n/**\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\n * @private\n */\n\nvar PdfGridRowCollection =\n/** @class */\nfunction () {\n  // Constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\n   * @private\n   */\n  function PdfGridRowCollection(grid) {\n    this.rows = [];\n    this.grid = grid;\n  }\n\n  Object.defineProperty(PdfGridRowCollection.prototype, \"count\", {\n    //Properties\n\n    /**\n     * Gets the number of header in the `PdfGrid`.[Read-Only].\n     * @private\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGridRowCollection.prototype, \"rowCollection\", {\n    //Implementation\n\n    /**\n     * Return the row collection of the `grid`.\n     * @private\n     */\n    get: function () {\n      return this.rows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridRowCollection.prototype.addRow = function (arg) {\n    if (typeof arg === 'undefined') {\n      var temprow = new PdfGridRow(this.grid);\n      this.addRow(temprow);\n      return temprow;\n    } else {\n      arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\n      arg.style.setFont(this.grid.style.font);\n      arg.style.setTextBrush(this.grid.style.textBrush);\n      arg.style.setTextPen(this.grid.style.textPen);\n\n      if (arg.cells.count === 0) {\n        for (var i = 0; i < this.grid.columns.count; i++) {\n          arg.cells.add(new PdfGridCell());\n        }\n      }\n\n      this.rows.push(arg);\n    }\n  };\n  /**\n   * Return the row by index.\n   * @private\n   */\n\n\n  PdfGridRowCollection.prototype.getRow = function (index) {\n    return this.rows[index];\n  };\n\n  return PdfGridRowCollection;\n}();\n\nexport { PdfGridRowCollection };\n/**\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\n * @private\n */\n\nvar PdfGridHeaderCollection =\n/** @class */\nfunction () {\n  //constructor\n\n  /**\n   * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\n   * @private\n   */\n  function PdfGridHeaderCollection(grid) {\n    /**\n     * The array to store the `rows` of the grid header.\n     * @private\n     */\n    this.rows = [];\n    this.grid = grid;\n    this.rows = [];\n  } //Properties\n\n  /**\n   * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n   * @private\n   */\n\n\n  PdfGridHeaderCollection.prototype.getHeader = function (index) {\n    // if (index < 0 || index >= Count) {\n    //     throw new IndexOutOfRangeException();\n    // }\n    return this.rows[index];\n  };\n\n  Object.defineProperty(PdfGridHeaderCollection.prototype, \"count\", {\n    /**\n     * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n     * @private\n     */\n    get: function () {\n      return this.rows.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGridHeaderCollection.prototype.add = function (arg) {\n    if (typeof arg === 'number') {\n      var row = void 0;\n\n      for (var i = 0; i < arg; i++) {\n        row = new PdfGridRow(this.grid);\n        row.isHeaderRow = true;\n\n        for (var j = 0; j < this.grid.columns.count; j++) {\n          row.cells.add(new PdfGridCell());\n        }\n\n        this.rows.push(row);\n      }\n\n      return this.rows;\n    } else {\n      this.rows.push(arg);\n    }\n  };\n\n  PdfGridHeaderCollection.prototype.indexOf = function (row) {\n    return this.rows.indexOf(row);\n  };\n\n  return PdfGridHeaderCollection;\n}();\n\nexport { PdfGridHeaderCollection };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-richtexteditor/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid-row.js"],"names":["PdfGridCell","PdfGridCellCollection","PdfGridRowStyle","PdfGridRow","grid","gridRowOverflowIndex","rowHeight","rowWidth","isrowFinish","isRowSpanRowHeightSet","noOfPageCount","isRowHeightSet","isPageBreakRowSpanApplied","isRowMergeComplete","repeatFlag","rowFontSplit","isHeaderRow","pdfGrid","Object","defineProperty","prototype","get","bRowSpanExists","set","value","enumerable","configurable","gridCells","rowStyle","setParent","i","cells","count","getCell","style","borders","border","font","backgroundBrush","backgroundImage","textBrush","textPen","gridRowBreakHeight","measureHeight","measureWidth","gridResult","bColumnSpanExists","rows","rowCollection","indexOf","rowSpanRemainingHeight","maxHeight","rowSpan","height","cell","rowMergeComplete","cellIn","rowin","headers","j","getHeader","getRow","hasRowSpan","Math","max","rowWid","columns","column","getColumn","width","PdfGridRowCollection","length","addRow","arg","temprow","setBackgroundBrush","setFont","setTextBrush","setTextPen","add","push","index","PdfGridHeaderCollection","row"],"mappings":"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","sourcesContent":["import { PdfGridCell, PdfGridCellCollection } from './pdf-grid-cell';\nimport { PdfGridRowStyle } from './styles/style';\n/**\n * `PdfGridRow` class provides customization of the settings for the particular row.\n */\nvar PdfGridRow = /** @class */ (function () {\n    //Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRow` class with the parent grid.\n     * @private\n     */\n    function PdfGridRow(grid) {\n        /**\n         * Stores the index of the overflowing row.\n         * @private\n         */\n        this.gridRowOverflowIndex = 0;\n        /**\n         * The `height` of the row.\n         * @private\n         */\n        this.rowHeight = 0;\n        /**\n         * The `width` of the row.\n         * @private\n         */\n        this.rowWidth = 0;\n        /**\n         * The `isFinish` of the row.\n         * @private\n         */\n        this.isrowFinish = false;\n        /**\n         * Check whether the Row span row height `is set explicitly`.\n         * @default false\n         * @public\n         */\n        this.isRowSpanRowHeightSet = false;\n        /**\n         * The `page count` of the row.\n         * @public\n         */\n        this.noOfPageCount = 0;\n        /**\n         * Check whether the row height `is set explicitly`.\n         * @default false\n         * @private\n         */\n        this.isRowHeightSet = false;\n        this.isPageBreakRowSpanApplied = false;\n        /**\n         * Check weather the row merge `is completed` or not.\n         * @default true\n         * @private\n         */\n        this.isRowMergeComplete = true;\n        this.repeatFlag = false;\n        this.rowFontSplit = false;\n        this.isHeaderRow = false;\n        this.pdfGrid = grid;\n    }\n    Object.defineProperty(PdfGridRow.prototype, \"rowSpanExists\", {\n        //Properties\n        /**\n         * Gets or sets a value indicating [`row span exists`].\n         * @private\n         */\n        get: function () {\n            return this.bRowSpanExists;\n        },\n        set: function (value) {\n            this.bRowSpanExists = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"cells\", {\n        /**\n         * Gets the `cells` from the selected row.[Read-Only].\n         * @private\n         */\n        get: function () {\n            if (this.gridCells == null) {\n                this.gridCells = new PdfGridCellCollection(this);\n            }\n            return this.gridCells;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"grid\", {\n        /**\n         * Gets or sets the parent `grid`.\n         * @private\n         */\n        get: function () {\n            return this.pdfGrid;\n        },\n        set: function (value) {\n            this.pdfGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"style\", {\n        /**\n         * Gets or sets the row `style`.\n         * @private\n         */\n        get: function () {\n            if (typeof this.rowStyle === 'undefined') {\n                this.rowStyle = new PdfGridRowStyle();\n                this.rowStyle.setParent(this);\n            }\n            return this.rowStyle;\n        },\n        set: function (value) {\n            this.rowStyle = value;\n            for (var i = 0; i < this.cells.count; i++) {\n                this.cells.getCell(i).style.borders = value.border;\n                if (typeof value.font !== 'undefined') {\n                    this.cells.getCell(i).style.font = value.font;\n                }\n                if (typeof value.backgroundBrush !== 'undefined') {\n                    this.cells.getCell(i).style.backgroundBrush = value.backgroundBrush;\n                }\n                if (typeof value.backgroundImage !== 'undefined') {\n                    this.cells.getCell(i).style.backgroundImage = value.backgroundImage;\n                }\n                if (typeof value.textBrush !== 'undefined') {\n                    this.cells.getCell(i).style.textBrush = value.textBrush;\n                }\n                if (typeof value.textPen !== 'undefined') {\n                    this.cells.getCell(i).style.textPen = value.textPen;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowBreakHeight\", {\n        /**\n         * `Height` of the row yet to be drawn after split.\n         * @private\n         */\n        get: function () {\n            if (typeof this.gridRowBreakHeight === 'undefined') {\n                this.gridRowBreakHeight = 0;\n            }\n            return this.gridRowBreakHeight;\n        },\n        set: function (value) {\n            this.gridRowBreakHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowOverflowIndex\", {\n        /**\n         * `over flow index` of the row.\n         * @private\n         */\n        get: function () {\n            return this.gridRowOverflowIndex;\n        },\n        set: function (value) {\n            this.gridRowOverflowIndex = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"height\", {\n        /**\n         * Gets or sets the `height` of the row.\n         * @private\n         */\n        get: function () {\n            if (!this.isRowHeightSet) {\n                this.rowHeight = this.measureHeight();\n            }\n            return this.rowHeight;\n        },\n        set: function (value) {\n            this.rowHeight = value;\n            this.isRowHeightSet = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"width\", {\n        /**\n         * Gets or sets the `width` of the row.\n         * @private\n         */\n        get: function () {\n            if (this.rowWidth === 0 || typeof this.rowWidth === 'undefined') {\n                this.rowWidth = this.measureWidth();\n            }\n            return this.rowWidth;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"NestedGridLayoutResult\", {\n        /**\n         * Gets or sets the row `Nested grid Layout Result`.\n         * @private\n         */\n        get: function () {\n            return this.gridResult;\n        },\n        set: function (value) {\n            this.gridResult = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"columnSpanExists\", {\n        /**\n         * Gets or sets a value indicating [`column span exists`].\n         * @private\n         */\n        get: function () {\n            return this.bColumnSpanExists;\n        },\n        set: function (value) {\n            this.bColumnSpanExists = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowMergeComplete\", {\n        /**\n         * Check whether the Row `has row span or row merge continue`.\n         * @private\n         */\n        get: function () {\n            return this.isRowMergeComplete;\n        },\n        set: function (value) {\n            this.isRowMergeComplete = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRow.prototype, \"rowIndex\", {\n        /**\n         * Returns `index` of the row.\n         * @private\n         */\n        get: function () {\n            return this.grid.rows.rowCollection.indexOf(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    //Implementation\n    /**\n     * `Calculates the height`.\n     * @private\n     */\n    PdfGridRow.prototype.measureHeight = function () {\n        var rowSpanRemainingHeight = 0;\n        var rowHeight;\n        var maxHeight = 0;\n        if (this.cells.getCell(0).rowSpan > 1) {\n            rowHeight = 0;\n        }\n        else {\n            rowHeight = this.cells.getCell(0).height;\n        }\n        for (var i = 0; i < this.cells.count; i++) {\n            var cell = this.cells.getCell(i);\n            //get the maximum rowspan remaining height.\n            if (cell.rowSpanRemainingHeight > rowSpanRemainingHeight) {\n                rowSpanRemainingHeight = cell.rowSpanRemainingHeight;\n            }\n            //skip the cell if row spanned.\n            // if (cell.isRowMergeContinue) {\n            //     continue;\n            // }\n            // if (!cell.isRowMergeContinue) {\n            //     this.rowMergeComplete = false;\n            // }\n            this.rowMergeComplete = false;\n            if (cell.rowSpan > 1) {\n                var cellIn = i;\n                var rowin = this.isHeaderRow ? this.grid.headers.indexOf(this) : this.grid.rows.rowCollection.indexOf(this);\n                for (var j = 0; j < cell.rowSpan; j++) {\n                    if ((j + 1) < cell.rowSpan) {\n                        (this.isHeaderRow ? this.grid.headers.getHeader(rowin + j + 1) : this.grid.rows.getRow(rowin + j + 1)).cells.getCell(cellIn).hasRowSpan = true;\n                    }\n                }\n                if (maxHeight < cell.height) {\n                    maxHeight = cell.height;\n                }\n                continue;\n            }\n            rowHeight = Math.max(rowHeight, cell.height);\n        }\n        if (maxHeight > rowHeight) {\n            rowHeight = maxHeight;\n        }\n        if (rowHeight === 0) {\n            rowHeight = maxHeight;\n        }\n        else if (rowSpanRemainingHeight > 0) {\n            rowHeight += rowSpanRemainingHeight;\n        }\n        return rowHeight;\n    };\n    PdfGridRow.prototype.measureWidth = function () {\n        var rowWid = 0;\n        for (var i = 0; i < this.grid.columns.count; i++) {\n            var column = this.grid.columns.getColumn(i);\n            rowWid += column.width;\n        }\n        return rowWid;\n    };\n    return PdfGridRow;\n}());\nexport { PdfGridRow };\n/**\n * `PdfGridRowCollection` class provides access to an ordered, strongly typed collection of 'PdfGridRow' objects.\n * @private\n */\nvar PdfGridRowCollection = /** @class */ (function () {\n    // Constructor\n    /**\n     * Initializes a new instance of the `PdfGridRowCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridRowCollection(grid) {\n        this.rows = [];\n        this.grid = grid;\n    }\n    Object.defineProperty(PdfGridRowCollection.prototype, \"count\", {\n        //Properties\n        /**\n         * Gets the number of header in the `PdfGrid`.[Read-Only].\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGridRowCollection.prototype, \"rowCollection\", {\n        //Implementation\n        /**\n         * Return the row collection of the `grid`.\n         * @private\n         */\n        get: function () {\n            return this.rows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridRowCollection.prototype.addRow = function (arg) {\n        if (typeof arg === 'undefined') {\n            var temprow = new PdfGridRow(this.grid);\n            this.addRow(temprow);\n            return temprow;\n        }\n        else {\n            arg.style.setBackgroundBrush(this.grid.style.backgroundBrush);\n            arg.style.setFont(this.grid.style.font);\n            arg.style.setTextBrush(this.grid.style.textBrush);\n            arg.style.setTextPen(this.grid.style.textPen);\n            if (arg.cells.count === 0) {\n                for (var i = 0; i < this.grid.columns.count; i++) {\n                    arg.cells.add(new PdfGridCell());\n                }\n            }\n            this.rows.push(arg);\n        }\n    };\n    /**\n     * Return the row by index.\n     * @private\n     */\n    PdfGridRowCollection.prototype.getRow = function (index) {\n        return this.rows[index];\n    };\n    return PdfGridRowCollection;\n}());\nexport { PdfGridRowCollection };\n/**\n * `PdfGridHeaderCollection` class provides customization of the settings for the header.\n * @private\n */\nvar PdfGridHeaderCollection = /** @class */ (function () {\n    //constructor\n    /**\n     * Initializes a new instance of the `PdfGridHeaderCollection` class with the parent grid.\n     * @private\n     */\n    function PdfGridHeaderCollection(grid) {\n        /**\n         * The array to store the `rows` of the grid header.\n         * @private\n         */\n        this.rows = [];\n        this.grid = grid;\n        this.rows = [];\n    }\n    //Properties\n    /**\n     * Gets a 'PdfGridRow' object that represents the `header` row in a 'PdfGridHeaderCollection' control.[Read-Only].\n     * @private\n     */\n    PdfGridHeaderCollection.prototype.getHeader = function (index) {\n        // if (index < 0 || index >= Count) {\n        //     throw new IndexOutOfRangeException();\n        // }\n        return (this.rows[index]);\n    };\n    Object.defineProperty(PdfGridHeaderCollection.prototype, \"count\", {\n        /**\n         * Gets the `number of header` in the 'PdfGrid'.[Read-Only]\n         * @private\n         */\n        get: function () {\n            return this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGridHeaderCollection.prototype.add = function (arg) {\n        if (typeof arg === 'number') {\n            var row = void 0;\n            for (var i = 0; i < arg; i++) {\n                row = new PdfGridRow(this.grid);\n                row.isHeaderRow = true;\n                for (var j = 0; j < this.grid.columns.count; j++) {\n                    row.cells.add(new PdfGridCell());\n                }\n                this.rows.push(row);\n            }\n            return this.rows;\n        }\n        else {\n            this.rows.push(arg);\n        }\n    };\n    PdfGridHeaderCollection.prototype.indexOf = function (row) {\n        return this.rows.indexOf(row);\n    };\n    return PdfGridHeaderCollection;\n}());\nexport { PdfGridHeaderCollection };\n"]},"metadata":{},"sourceType":"module"}