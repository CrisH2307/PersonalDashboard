{"ast":null,"code":"import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\n\nvar PdfImage =\n/** @class */\nfunction () {\n  function PdfImage() {}\n\n  Object.defineProperty(PdfImage.prototype, \"width\", {\n    /**\n     * Gets and Sets the `width` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageWidth;\n    },\n    set: function (value) {\n      this.imageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"height\", {\n    /**\n     * Gets and Sets the `height` of an image.\n     * @private\n     */\n    get: function () {\n      return this.imageHeight;\n    },\n    set: function (value) {\n      this.imageHeight = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"size\", {\n    /**\n     * Gets or sets the size of the image.\n     * @private\n     */\n    set: function (value) {\n      this.width = value.width;\n      this.height = value.height;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n    /**\n     * Gets the `physical dimension` of an image.\n     * @private\n     */\n    get: function () {\n      this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n      return new SizeF(this.width, this.height);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfImage.prototype, \"element\", {\n    // /**\n    //  * Gets the `image stream as string`.\n    //  * @private\n    //  */\n    // public static fromString(string : string) : PdfImage {\n    //     let image : PdfImage = new PdfBitmap(string);\n    //     return image;\n    // }\n\n    /**\n     * Gets the `element` image stream.\n     * @private\n     */\n    get: function () {\n      return this.imageStream;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n    if (typeof horizontalResolution === 'undefined') {\n      var dpiX = PdfUnitConverter.horizontalResolution;\n      var dpiY = PdfUnitConverter.verticalResolution;\n      var size = this.getPointSize(width, height, dpiX, dpiY);\n      return size;\n    } else {\n      var ucX = new PdfUnitConverter(horizontalResolution);\n      var ucY = new PdfUnitConverter(verticalResolution);\n      var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n      var size = new SizeF(ptWidth, ptHeight);\n      return size;\n    }\n  };\n\n  return PdfImage;\n}();\n\nexport { PdfImage };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-richtexteditor/node_modules/@syncfusion/ej2-pdf-export/src/implementation/graphics/images/pdf-image.js"],"names":["SizeF","PdfGraphicsUnit","PdfUnitConverter","PdfImage","Object","defineProperty","prototype","get","imageWidth","set","value","enumerable","configurable","imageHeight","width","height","imagePhysicalDimension","getPointSize","horizontalResolution","verticalResolution","imageStream","dpiX","dpiY","size","ucX","ucY","ptWidth","convertUnits","Pixel","Point","ptHeight"],"mappings":"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","sourcesContent":["import { SizeF } from './../../drawing/pdf-drawing';\nimport { PdfGraphicsUnit } from './../enum';\nimport { PdfUnitConverter } from './../unit-convertor';\n/**\n * `PdfImage` class represents the base class for images and provides functionality for the 'PdfBitmap' class.\n * @private\n */\nvar PdfImage = /** @class */ (function () {\n    function PdfImage() {\n    }\n    Object.defineProperty(PdfImage.prototype, \"width\", {\n        /**\n         * Gets and Sets the `width` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageWidth;\n        },\n        set: function (value) {\n            this.imageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"height\", {\n        /**\n         * Gets and Sets the `height` of an image.\n         * @private\n         */\n        get: function () {\n            return this.imageHeight;\n        },\n        set: function (value) {\n            this.imageHeight = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"size\", {\n        /**\n         * Gets or sets the size of the image.\n         * @private\n         */\n        set: function (value) {\n            this.width = value.width;\n            this.height = value.height;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"physicalDimension\", {\n        /**\n         * Gets the `physical dimension` of an image.\n         * @private\n         */\n        get: function () {\n            this.imagePhysicalDimension = this.getPointSize(this.width, this.height, this.horizontalResolution, this.verticalResolution);\n            return new SizeF(this.width, this.height);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfImage.prototype, \"element\", {\n        // /**\n        //  * Gets the `image stream as string`.\n        //  * @private\n        //  */\n        // public static fromString(string : string) : PdfImage {\n        //     let image : PdfImage = new PdfBitmap(string);\n        //     return image;\n        // }\n        /**\n         * Gets the `element` image stream.\n         * @private\n         */\n        get: function () {\n            return this.imageStream;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfImage.prototype.getPointSize = function (width, height, horizontalResolution, verticalResolution) {\n        if (typeof horizontalResolution === 'undefined') {\n            var dpiX = PdfUnitConverter.horizontalResolution;\n            var dpiY = PdfUnitConverter.verticalResolution;\n            var size = this.getPointSize(width, height, dpiX, dpiY);\n            return size;\n        }\n        else {\n            var ucX = new PdfUnitConverter(horizontalResolution);\n            var ucY = new PdfUnitConverter(verticalResolution);\n            var ptWidth = ucX.convertUnits(width, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var ptHeight = ucY.convertUnits(height, PdfGraphicsUnit.Pixel, PdfGraphicsUnit.Point);\n            var size = new SizeF(ptWidth, ptHeight);\n            return size;\n        }\n    };\n    return PdfImage;\n}());\nexport { PdfImage };\n"]},"metadata":{},"sourceType":"module"}