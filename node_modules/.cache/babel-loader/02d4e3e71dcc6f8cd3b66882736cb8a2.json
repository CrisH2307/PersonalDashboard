{"ast":null,"code":"import * as CONSTANT from './../base/constant';\nimport { ClearFormat } from './clearformat';\nimport * as EVENTS from './../../common/constant';\n/**\n * Clear Format EXEC internal component\n *\n * @hidden\n\n */\n\nvar ClearFormatExec =\n/** @class */\nfunction () {\n  /**\n   * Constructor for creating the Formats plugin\n   *\n   * @param {EditorManager} parent - specifies the parent element.\n   * @returns {void}\n   * @hidden\n    */\n  function ClearFormatExec(parent) {\n    this.parent = parent;\n    this.addEventListener();\n  }\n\n  ClearFormatExec.prototype.addEventListener = function () {\n    this.parent.observer.on(CONSTANT.CLEAR_TYPE, this.applyClear, this);\n    this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\n  };\n\n  ClearFormatExec.prototype.onKeyDown = function (e) {\n    switch (e.event.action) {\n      case 'clear-format':\n        this.applyClear({\n          subCommand: 'ClearFormat',\n          callBack: e.callBack,\n          enterAction: e.enterAction\n        });\n        e.event.preventDefault();\n        break;\n    }\n  };\n\n  ClearFormatExec.prototype.applyClear = function (e) {\n    if (e.subCommand === 'ClearFormat') {\n      ClearFormat.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector);\n\n      if (e.callBack) {\n        e.callBack({\n          requestType: e.subCommand,\n          event: e.event,\n          editorMode: 'HTML',\n          range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n          elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n        });\n      }\n    }\n  };\n\n  return ClearFormatExec;\n}();\n\nexport { ClearFormatExec };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-richtexteditor/node_modules/@syncfusion/ej2-richtexteditor/src/editor-manager/plugin/clearformat-exec.js"],"names":["CONSTANT","ClearFormat","EVENTS","ClearFormatExec","parent","addEventListener","prototype","observer","on","CLEAR_TYPE","applyClear","KEY_DOWN_HANDLER","onKeyDown","e","event","action","subCommand","callBack","enterAction","preventDefault","clear","currentDocument","editableElement","selector","requestType","editorMode","range","nodeSelection","getRange","elements","getSelectedNodes"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,oBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,OAAO,KAAKC,MAAZ,MAAwB,yBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,eAAe;AAAG;AAAe,YAAY;AAC7C;AACJ;AACA;AACA;AACA;AACA;AACA;AAEI,WAASA,eAAT,CAAyBC,MAAzB,EAAiC;AAC7B,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,gBAAL;AACH;;AACDF,EAAAA,eAAe,CAACG,SAAhB,CAA0BD,gBAA1B,GAA6C,YAAY;AACrD,SAAKD,MAAL,CAAYG,QAAZ,CAAqBC,EAArB,CAAwBR,QAAQ,CAACS,UAAjC,EAA6C,KAAKC,UAAlD,EAA8D,IAA9D;AACA,SAAKN,MAAL,CAAYG,QAAZ,CAAqBC,EAArB,CAAwBN,MAAM,CAACS,gBAA/B,EAAiD,KAAKC,SAAtD,EAAiE,IAAjE;AACH,GAHD;;AAIAT,EAAAA,eAAe,CAACG,SAAhB,CAA0BM,SAA1B,GAAsC,UAAUC,CAAV,EAAa;AAC/C,YAAQA,CAAC,CAACC,KAAF,CAAQC,MAAhB;AACI,WAAK,cAAL;AACI,aAAKL,UAAL,CAAgB;AAAEM,UAAAA,UAAU,EAAE,aAAd;AAA6BC,UAAAA,QAAQ,EAAEJ,CAAC,CAACI,QAAzC;AAAmDC,UAAAA,WAAW,EAAEL,CAAC,CAACK;AAAlE,SAAhB;AACAL,QAAAA,CAAC,CAACC,KAAF,CAAQK,cAAR;AACA;AAJR;AAMH,GAPD;;AAQAhB,EAAAA,eAAe,CAACG,SAAhB,CAA0BI,UAA1B,GAAuC,UAAUG,CAAV,EAAa;AAChD,QAAIA,CAAC,CAACG,UAAF,KAAiB,aAArB,EAAoC;AAChCf,MAAAA,WAAW,CAACmB,KAAZ,CAAkB,KAAKhB,MAAL,CAAYiB,eAA9B,EAA+C,KAAKjB,MAAL,CAAYkB,eAA3D,EAA4ET,CAAC,CAACK,WAA9E,EAA2FL,CAAC,CAACU,QAA7F;;AACA,UAAIV,CAAC,CAACI,QAAN,EAAgB;AACZJ,QAAAA,CAAC,CAACI,QAAF,CAAW;AACPO,UAAAA,WAAW,EAAEX,CAAC,CAACG,UADR;AAEPF,UAAAA,KAAK,EAAED,CAAC,CAACC,KAFF;AAGPW,UAAAA,UAAU,EAAE,MAHL;AAIPC,UAAAA,KAAK,EAAE,KAAKtB,MAAL,CAAYuB,aAAZ,CAA0BC,QAA1B,CAAmC,KAAKxB,MAAL,CAAYiB,eAA/C,CAJA;AAKPQ,UAAAA,QAAQ,EAAE,KAAKzB,MAAL,CAAYuB,aAAZ,CAA0BG,gBAA1B,CAA2C,KAAK1B,MAAL,CAAYiB,eAAvD;AALH,SAAX;AAOH;AACJ;AACJ,GAbD;;AAcA,SAAOlB,eAAP;AACH,CAxCoC,EAArC;;AAyCA,SAASA,eAAT","sourcesContent":["import * as CONSTANT from './../base/constant';\nimport { ClearFormat } from './clearformat';\nimport * as EVENTS from './../../common/constant';\n/**\n * Clear Format EXEC internal component\n *\n * @hidden\n\n */\nvar ClearFormatExec = /** @class */ (function () {\n    /**\n     * Constructor for creating the Formats plugin\n     *\n     * @param {EditorManager} parent - specifies the parent element.\n     * @returns {void}\n     * @hidden\n\n     */\n    function ClearFormatExec(parent) {\n        this.parent = parent;\n        this.addEventListener();\n    }\n    ClearFormatExec.prototype.addEventListener = function () {\n        this.parent.observer.on(CONSTANT.CLEAR_TYPE, this.applyClear, this);\n        this.parent.observer.on(EVENTS.KEY_DOWN_HANDLER, this.onKeyDown, this);\n    };\n    ClearFormatExec.prototype.onKeyDown = function (e) {\n        switch (e.event.action) {\n            case 'clear-format':\n                this.applyClear({ subCommand: 'ClearFormat', callBack: e.callBack, enterAction: e.enterAction });\n                e.event.preventDefault();\n                break;\n        }\n    };\n    ClearFormatExec.prototype.applyClear = function (e) {\n        if (e.subCommand === 'ClearFormat') {\n            ClearFormat.clear(this.parent.currentDocument, this.parent.editableElement, e.enterAction, e.selector);\n            if (e.callBack) {\n                e.callBack({\n                    requestType: e.subCommand,\n                    event: e.event,\n                    editorMode: 'HTML',\n                    range: this.parent.nodeSelection.getRange(this.parent.currentDocument),\n                    elements: this.parent.nodeSelection.getSelectedNodes(this.parent.currentDocument)\n                });\n            }\n        }\n    };\n    return ClearFormatExec;\n}());\nexport { ClearFormatExec };\n"]},"metadata":{},"sourceType":"module"}