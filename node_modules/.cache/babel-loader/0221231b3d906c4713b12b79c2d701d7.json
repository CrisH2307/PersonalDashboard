{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\n\n\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\n\nvar PdfGrid =\n/** @class */\nfunction (_super) {\n  __extends(PdfGrid, _super); //constructor\n\n  /**\n   * Initialize a new instance for `PdfGrid` class.\n   * @private\n   */\n\n\n  function PdfGrid() {\n    var _this = _super.call(this) || this;\n    /**\n     * @hidden\n     * @private\n     */\n\n\n    _this.gridSize = new SizeF(0, 0);\n    /**\n     * Check the child grid is ' split or not'\n     */\n\n    _this.isGridSplit = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.isRearranged = false;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.pageBounds = new RectangleF();\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.listOfNavigatePages = [];\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.parentCellIndex = 0;\n    _this.tempWidth = 0;\n    /**\n     * @hidden\n     * @private\n     */\n\n    _this.breakRow = true;\n    _this.splitChildRowIndex = -1;\n    /**\n     * The event raised on `begin cell lay outing`.\n     * @event\n     * @private\n     */\n    //public beginPageLayout : Function;\n\n    /**\n     * The event raised on `end cell lay outing`.\n     * @event\n     * @private\n     */\n    //public endPageLayout : Function;\n\n    _this.hasRowSpanSpan = false;\n    _this.hasColumnSpan = false;\n    _this.isSingleGrid = true;\n    return _this;\n  }\n\n  Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n    //Properties\n\n    /**\n     * Gets a value indicating whether the `start cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n    /**\n     * Gets a value indicating whether the `end cell layout event` should be raised.\n     * @private\n     */\n    get: function () {\n      return typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n    /**\n     * Gets or sets a value indicating whether to `repeat header`.\n     * @private\n     */\n    get: function () {\n      if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n        this.bRepeatHeader = false;\n      }\n\n      return this.bRepeatHeader;\n    },\n    set: function (value) {\n      this.bRepeatHeader = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n    /**\n     * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n     * @private\n     */\n    get: function () {\n      return this.breakRow;\n    },\n    set: function (value) {\n      this.breakRow = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"columns\", {\n    /**\n     * Gets the `column` collection of the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n        this.gridColumns = new PdfGridColumnCollection(this);\n      }\n\n      return this.gridColumns;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"rows\", {\n    /**\n     * Gets the `row` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridRows == null) {\n        this.gridRows = new PdfGridRowCollection(this);\n      }\n\n      return this.gridRows;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"headers\", {\n    /**\n     * Gets the `headers` collection from the PdfGrid.[Read-Only]\n     * @private\n     */\n    get: function () {\n      if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n        this.gridHeaders = new PdfGridHeaderCollection(this);\n      }\n\n      return this.gridHeaders;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n    /**\n     * Indicating `initial width` of the page.\n     * @private\n     */\n    get: function () {\n      return this.gridInitialWidth;\n    },\n    set: function (value) {\n      this.gridInitialWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"style\", {\n    /**\n     * Gets or sets the `grid style`.\n     * @private\n     */\n    get: function () {\n      if (this.gridStyle == null) {\n        this.gridStyle = new PdfGridStyle();\n      }\n\n      return this.gridStyle;\n    },\n    set: function (value) {\n      if (this.gridStyle == null) {\n        this.gridStyle = value;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n    /**\n     * Gets a value indicating whether the grid column width is considered to be `page width`.\n     * @private\n     */\n    get: function () {\n      return this.ispageWidth;\n    },\n    set: function (value) {\n      this.ispageWidth = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n    /**\n     * Gets or set if grid `is nested grid`.\n     * @private\n     */\n    get: function () {\n      return this.ischildGrid;\n    },\n    set: function (value) {\n      this.ischildGrid = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"size\", {\n    /**\n     * Gets or set if grid ' is split or not'\n     * @public\n     */\n    // public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }public get isGridSplit() : boolean {\n    //     return this.isgridSplit;\n    // }\n    // public set isGridSplit(value : boolean) {\n    //     this.isgridSplit = value;\n    // }\n\n    /**\n     * Gets the `size`.\n     * @private\n     */\n    get: function () {\n      if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n        this.gridSize = this.measure();\n      }\n\n      return this.gridSize; // } else {\n      //     return this.gridSize;\n      // }\n    },\n    set: function (value) {\n      this.gridSize = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n    get: function () {\n      return this.parentCell;\n    },\n    set: function (value) {\n      this.parentCell = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n    get: function () {\n      return this.layoutFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n    if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2.x, arg2.y);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n      return this.drawHelper(arg1, arg2, arg3, null);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n      return this.drawHelper(arg1, arg2, null);\n    } else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n      return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n    } else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n      var width = arg1.graphics.clientSize.width - arg2;\n      var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n      return this.drawHelper(arg1, layoutRectangle, arg4);\n    } else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n      return this.drawHelper(arg1, arg2, null);\n    } else {\n      return this.drawHelper(arg1, arg2, arg3);\n    }\n  };\n  /**\n   * `measures` this instance.\n   * @private\n   */\n\n\n  PdfGrid.prototype.measure = function () {\n    var height = 0;\n    var width = this.columns.width;\n\n    for (var i = 0; i < this.headers.count; i++) {\n      var row = this.headers.getHeader(i);\n      height += row.height;\n    }\n\n    for (var i = 0; i < this.rows.count; i++) {\n      var row = this.rows.getRow(i);\n      height += row.height;\n    }\n\n    return new SizeF(width, height);\n  };\n\n  PdfGrid.prototype.onBeginCellDraw = function (args) {\n    if (this.raiseBeginCellDraw) {\n      this.beginCellDraw(this, args);\n    }\n  };\n\n  PdfGrid.prototype.onEndCellDraw = function (args) {\n    if (this.raiseEndCellDraw) {\n      this.endCellDraw(this, args);\n    }\n  };\n  /**\n   * `Layouts` the specified graphics.\n   * @private\n   */\n\n\n  PdfGrid.prototype.layout = function (param) {\n    var width = param.bounds.width;\n    var height = param.bounds.height;\n    var hasChanged = false;\n\n    if (typeof param.bounds.width === 'undefined' || param.bounds.width === 0) {\n      width = param.page.getClientSize().width - param.bounds.x;\n      hasChanged = true;\n    }\n\n    if (typeof param.bounds.height === 'undefined' || param.bounds.height === 0) {\n      height = param.page.getClientSize().height - param.bounds.y;\n      hasChanged = true;\n    }\n\n    if (hasChanged) {\n      param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);\n    }\n\n    if (this.rows.count !== 0) {\n      var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n\n      if (currentRow.borders != null && (currentRow.borders.left != null && currentRow.borders.left.width !== 1 || currentRow.borders.top != null && currentRow.borders.top.width !== 1)) {\n        var x = currentRow.borders.left.width / 2;\n        var y = currentRow.borders.top.width / 2;\n\n        if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n          var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n          param.bounds = newBound;\n        }\n      }\n    }\n\n    this.setSpan();\n    this.checkSpan();\n    this.layoutFormat = param.format;\n    this.gridLocation = param.bounds;\n    var layouter = new PdfGridLayouter(this);\n    var result = layouter.Layouter(param);\n    return result;\n  };\n\n  PdfGrid.prototype.setSpan = function () {\n    var colSpan = 1;\n    var rowSpan = 1;\n    var currentCellIndex = 0;\n    var currentRowIndex = 0;\n    var maxSpan = 0;\n    var rowCount = this.headers.count;\n\n    for (var i = 0; i < rowCount; i++) {\n      var row = this.headers.getHeader(i);\n      maxSpan = 0;\n      var colCount = row.cells.count;\n\n      for (var j = 0; j < colCount; j++) {\n        var cell = row.cells.getCell(j);\n        maxSpan = Math.max(maxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n        if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n          if (cell.columnSpan + j > row.cells.count) {\n            throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          }\n\n          if (cell.rowSpan + i > this.headers.count) {\n            throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n          } // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n          //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n          // }\n\n\n          if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n            colSpan = cell.columnSpan;\n            rowSpan = cell.rowSpan;\n            currentCellIndex = j;\n            currentRowIndex = i;\n            cell.isCellMergeStart = true;\n            cell.isRowMergeStart = true; //Set Column merges for first row\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n              colSpan--;\n            }\n\n            currentCellIndex = j;\n            colSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n              rowSpan--;\n\n              while (colSpan > 1) {\n                currentCellIndex++;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                colSpan--;\n              }\n\n              colSpan = cell.columnSpan;\n              currentCellIndex = j;\n            }\n          } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n            colSpan = cell.columnSpan;\n            currentCellIndex = j;\n            cell.isCellMergeStart = true; //Set Column merges.\n\n            while (colSpan > 1) {\n              currentCellIndex++;\n              row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n              colSpan--;\n            }\n          } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n            rowSpan = cell.rowSpan;\n            currentRowIndex = i; //Set row Merges.\n\n            while (rowSpan > 1) {\n              currentRowIndex++;\n              this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n              rowSpan--;\n            }\n          }\n        }\n      }\n\n      row.maximumRowSpan = maxSpan;\n    }\n  };\n\n  PdfGrid.prototype.checkSpan = function () {\n    var cellcolSpan;\n    var cellrowSpan = 1;\n    var cellmaxSpan = 0;\n    var currentCellIndex;\n    var currentRowIndex = 0;\n    cellcolSpan = cellrowSpan = 1;\n    currentCellIndex = currentRowIndex = 0;\n\n    if (this.hasRowSpanSpan || this.hasColumnSpan) {\n      var rowCount = this.rows.count;\n\n      for (var i = 0; i < rowCount; i++) {\n        var row = this.rows.getRow(i);\n        cellmaxSpan = 0;\n        var colCount = row.cells.count;\n\n        for (var j = 0; j < colCount; j++) {\n          var cell = row.cells.getCell(j);\n          cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan); //Skip setting span map for already coverted rows/columns.\n\n          if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n            if (cell.columnSpan + j > row.cells.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.rowSpan + i > this.rows.count) {\n              throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n            }\n\n            if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n              cellcolSpan = cell.columnSpan;\n              cellrowSpan = cell.rowSpan;\n              currentCellIndex = j;\n              currentRowIndex = i;\n              cell.isCellMergeStart = true;\n              cell.isRowMergeStart = true; //Set Column merges for first row\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellcolSpan--;\n              }\n\n              currentCellIndex = j;\n              cellcolSpan = cell.columnSpan; //Set Row Merges and column merges foreach subsequent rows.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                cellrowSpan--;\n\n                while (cellcolSpan > 1) {\n                  currentCellIndex++;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                  this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                  cellcolSpan--;\n                }\n\n                cellcolSpan = cell.columnSpan;\n                currentCellIndex = j;\n              }\n            } else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n              cellcolSpan = cell.columnSpan;\n              currentCellIndex = j;\n              cell.isCellMergeStart = true; //Set Column merges.\n\n              while (cellcolSpan > 1) {\n                currentCellIndex++;\n                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                cellcolSpan--;\n              }\n            } else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n              cellrowSpan = cell.rowSpan;\n              currentRowIndex = i; //Set row Merges.\n\n              while (cellrowSpan > 1) {\n                currentRowIndex++;\n                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                cellrowSpan--;\n              }\n            }\n          }\n        }\n\n        row.maximumRowSpan = cellmaxSpan;\n      }\n    }\n  };\n\n  PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n    if (typeof bounds !== 'undefined') {\n      this.isPageWidth = false;\n      var widths = this.columns.getDefaultWidths(bounds.width - bounds.x); //let tempWidth : number = this.columns.getColumn(0).width;\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        // if (this.columns.getColumn(i).width < 0)\n        //     this.columns.getColumn(i).columnWidth = widths[i];\n        // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n        this.columns.getColumn(i).columnWidth = widths[i];\n        this.tempWidth = widths[i];\n      }\n\n      if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n        var padding = 0;\n        var columnWidth = 0;\n        var columnCount = this.columns.count;\n        var childGridColumnWidth = 0;\n\n        if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n          if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n            padding += this.ParentCell.style.cellPadding.left;\n          }\n\n          if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n            padding += this.ParentCell.style.cellPadding.right;\n          }\n        }\n\n        for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n          columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n        }\n\n        for (var j = 0; j < this.columns.count; j++) {\n          if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n            columnWidth -= this.gridColumns.getColumn(j).width;\n            columnCount--;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined') {\n          if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.top;\n          }\n\n          if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n            padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n          }\n        }\n\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n\n        if (columnWidth > padding) {\n          childGridColumnWidth = (columnWidth - padding) / columnCount;\n          this.tempWidth = childGridColumnWidth;\n\n          if (this.ParentCell != null) {\n            for (var j = 0; j < this.columns.count; j++) {\n              if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n            }\n          }\n        }\n      } // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n      // {\n      //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n      //     {\n      //         widths = this.columns.getDefaultWidths(bounds.width);\n      //         for (let i : number = 0; i < this.columns.count; i++)\n      //         {\n      //             this.columns.getColumn(i).width = widths[i];\n      //         }\n      //     }\n      // }\n\n    } else {\n      var widths = [this.columns.count];\n\n      for (var n = 0; n < this.columns.count; n++) {\n        widths[n] = 0;\n      }\n\n      var cellWidth = 0;\n      var cellWidths = 0;\n\n      if (typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined' || this.isChildGrid === null && typeof this.gridLocation !== 'undefined') {\n        this.initialWidth = this.gridLocation.width;\n      }\n\n      if (this.headers.count > 0) {\n        var colCount_1 = this.headers.getHeader(0).cells.count;\n        var rowCount = this.headers.count;\n\n        for (var i = 0; i < colCount_1; i++) {\n          cellWidth = 0;\n\n          for (var j = 0; j < rowCount; j++) {\n            var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n            cellWidth = Math.max(cellWidth, rowWidth);\n          }\n\n          widths[i] = cellWidth;\n        }\n      } // else {\n      //     let colCount : number = this.rows.getRow(0).cells.count;\n      //     let rowCount : number = this.rows.count;\n      //     for (let i : number = 0; i < colCount; i++) {\n      //         cellWidth = 0;\n      //         for (let j : number = 0; j < rowCount; j++) {\n      //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n      //             cellWidth = Math.max(cellWidth, rowWidth);\n      //         }\n      //         widths[i] = cellWidth;\n      //     }\n      // }\n\n\n      cellWidth = 0;\n\n      for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n        for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n          if (this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue || this.rows.getRow(j).cells.getCell(i).value != null) {\n            if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n              var value = this.rows.getRow(j).grid.style.cellPadding.right + this.rows.getRow(j).grid.style.cellPadding.left + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2; //  if (this.initialWidth != 0 )\n              //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n            }\n\n            var rowWidth = 0;\n            rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width; // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n            // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n            // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n            // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n            // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n            // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n            // if (isCorrectWidth || isCorrectHeight) {\n            //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n            // }\n            // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n\n            cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n            cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n          }\n        }\n\n        if (this.rows.count != 0) widths[i] = cellWidth;\n        cellWidth = 0;\n      }\n\n      for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n        for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n          if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n            var total = widths[j];\n\n            for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n              total += widths[j + k];\n            } // if (this.rows.getRow(i).cells.getCell(j).width > total)\n            // {\n            //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n            //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n            //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n            //         widths[k] += extendedWidth;\n            // }\n\n          }\n        }\n      } // if (this.isChildGrid && this.initialWidth != 0)\n      // {\n      //     widths = this.columns.getDefaultWidths(this.initialWidth);\n      // }\n\n\n      for (var i = 0, count = this.columns.count; i < count; i++) {\n        if (this.columns.getColumn(i).width <= 0) this.columns.getColumn(i).columnWidth = widths[i];else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth) this.columns.getColumn(i).columnWidth = widths[i];\n      }\n\n      var padding = 0;\n      var colWidth = 0;\n      var colCount = this.columns.count;\n      var childGridColWidth = 0;\n      colWidth = this.tempWidth;\n\n      for (var j = 0; j < this.columns.count; j++) {\n        if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n          colWidth -= this.gridColumns.getColumn(j).width;\n          colCount--;\n        }\n      } // if (this.style.cellSpacing != 0){\n      //     colWidth -= this.style.cellSpacing * 2;\n      // }\n\n\n      if (colWidth > 0) {\n        if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n          colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n        }\n      }\n\n      if (colWidth > padding) {\n        childGridColWidth = colWidth / colCount;\n\n        if (this.ParentCell != null) {\n          for (var j = 0; j < this.columns.count; j++) {\n            if (!this.columns.getColumn(j).isCustomWidth) this.columns.getColumn(j).columnWidth = childGridColWidth;\n          }\n        }\n      }\n    }\n  };\n\n  return PdfGrid;\n}(PdfLayoutElement);\n\nexport { PdfGrid };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-pdf-export/src/implementation/structured-elements/grid/pdf-grid.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","PdfGridColumnCollection","PdfGridRowCollection","PdfGridHeaderCollection","RectangleF","SizeF","PointF","PdfLayoutElement","PdfLayoutFormat","PdfGridStyle","PdfBorders","PdfGridLayouter","PdfGrid","_super","_this","call","gridSize","isGridSplit","isRearranged","pageBounds","listOfNavigatePages","parentCellIndex","tempWidth","breakRow","splitChildRowIndex","hasRowSpanSpan","hasColumnSpan","isSingleGrid","defineProperty","get","beginCellDraw","enumerable","configurable","endCellDraw","bRepeatHeader","set","value","gridColumns","gridRows","gridHeaders","gridInitialWidth","gridStyle","ispageWidth","ischildGrid","width","height","measure","parentCell","layoutFormat","draw","arg1","arg2","arg3","arg4","drawHelper","x","y","graphics","clientSize","layoutRectangle","columns","i","headers","count","row","getHeader","rows","getRow","onBeginCellDraw","args","raiseBeginCellDraw","onEndCellDraw","raiseEndCellDraw","layout","param","bounds","hasChanged","page","getClientSize","currentRow","cells","getCell","style","borders","left","top","default","right","newBound","setSpan","checkSpan","format","gridLocation","layouter","result","Layouter","colSpan","rowSpan","currentCellIndex","currentRowIndex","maxSpan","rowCount","colCount","j","cell","Math","max","isCellMergeContinue","isRowMergeContinue","columnSpan","Error","toString","isCellMergeStart","isRowMergeStart","maximumRowSpan","cellcolSpan","cellrowSpan","cellmaxSpan","measureColumnsWidth","isPageWidth","widths","getDefaultWidths","getColumn","columnWidth","ParentCell","allowHorizontalOverflow","grid","padding","columnCount","childGridColumnWidth","cellPadding","hasLeftPad","hasRightPad","isCustomWidth","hasTopPad","bottom","hasBottomPad","cellSpacing","n","cellWidth","cellWidths","isChildGrid","initialWidth","colCount_1","rowWidth","min","colCount_2","RowCount","ColCount","total","k","colWidth","childGridColWidth"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * PdfGrid.ts class for EJ2-PDF\n */\nimport { PdfGridColumnCollection } from './pdf-grid-column';\nimport { PdfGridRowCollection, PdfGridHeaderCollection } from './pdf-grid-row';\nimport { RectangleF, SizeF, PointF } from './../../drawing/pdf-drawing';\nimport { PdfLayoutElement } from './../../graphics/figures/layout-element';\nimport { PdfLayoutFormat } from './../../graphics/figures/base/element-layouter';\nimport { PdfGridStyle } from './styles/style';\nimport { PdfBorders } from './styles/pdf-borders';\nimport { PdfGridLayouter } from './../../structured-elements/grid/layout/grid-layouter';\nvar PdfGrid = /** @class */ (function (_super) {\n    __extends(PdfGrid, _super);\n    //constructor\n    /**\n     * Initialize a new instance for `PdfGrid` class.\n     * @private\n     */\n    function PdfGrid() {\n        var _this = _super.call(this) || this;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.gridSize = new SizeF(0, 0);\n        /**\n         * Check the child grid is ' split or not'\n         */\n        _this.isGridSplit = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.isRearranged = false;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.pageBounds = new RectangleF();\n        /**\n         * @hidden\n         * @private\n         */\n        _this.listOfNavigatePages = [];\n        /**\n         * @hidden\n         * @private\n         */\n        _this.parentCellIndex = 0;\n        _this.tempWidth = 0;\n        /**\n         * @hidden\n         * @private\n         */\n        _this.breakRow = true;\n        _this.splitChildRowIndex = -1;\n        /**\n         * The event raised on `begin cell lay outing`.\n         * @event\n         * @private\n         */\n        //public beginPageLayout : Function;\n        /**\n         * The event raised on `end cell lay outing`.\n         * @event\n         * @private\n         */\n        //public endPageLayout : Function;\n        _this.hasRowSpanSpan = false;\n        _this.hasColumnSpan = false;\n        _this.isSingleGrid = true;\n        return _this;\n    }\n    Object.defineProperty(PdfGrid.prototype, \"raiseBeginCellDraw\", {\n        //Properties\n        /**\n         * Gets a value indicating whether the `start cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.beginCellDraw !== 'undefined' && typeof this.beginCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"raiseEndCellDraw\", {\n        /**\n         * Gets a value indicating whether the `end cell layout event` should be raised.\n         * @private\n         */\n        get: function () {\n            return (typeof this.endCellDraw !== 'undefined' && typeof this.endCellDraw !== null);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"repeatHeader\", {\n        /**\n         * Gets or sets a value indicating whether to `repeat header`.\n         * @private\n         */\n        get: function () {\n            if (this.bRepeatHeader == null || typeof this.bRepeatHeader === 'undefined') {\n                this.bRepeatHeader = false;\n            }\n            return this.bRepeatHeader;\n        },\n        set: function (value) {\n            this.bRepeatHeader = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"allowRowBreakAcrossPages\", {\n        /**\n         * Gets or sets a value indicating whether to split or cut rows that `overflow a page`.\n         * @private\n         */\n        get: function () {\n            return this.breakRow;\n        },\n        set: function (value) {\n            this.breakRow = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"columns\", {\n        /**\n         * Gets the `column` collection of the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridColumns == null || typeof this.gridColumns === 'undefined') {\n                this.gridColumns = new PdfGridColumnCollection(this);\n            }\n            return this.gridColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"rows\", {\n        /**\n         * Gets the `row` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridRows == null) {\n                this.gridRows = new PdfGridRowCollection(this);\n            }\n            return this.gridRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"headers\", {\n        /**\n         * Gets the `headers` collection from the PdfGrid.[Read-Only]\n         * @private\n         */\n        get: function () {\n            if (this.gridHeaders == null || typeof this.gridHeaders === 'undefined') {\n                this.gridHeaders = new PdfGridHeaderCollection(this);\n            }\n            return this.gridHeaders;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"initialWidth\", {\n        /**\n         * Indicating `initial width` of the page.\n         * @private\n         */\n        get: function () {\n            return this.gridInitialWidth;\n        },\n        set: function (value) {\n            this.gridInitialWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"style\", {\n        /**\n         * Gets or sets the `grid style`.\n         * @private\n         */\n        get: function () {\n            if (this.gridStyle == null) {\n                this.gridStyle = new PdfGridStyle();\n            }\n            return this.gridStyle;\n        },\n        set: function (value) {\n            if (this.gridStyle == null) {\n                this.gridStyle = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isPageWidth\", {\n        /**\n         * Gets a value indicating whether the grid column width is considered to be `page width`.\n         * @private\n         */\n        get: function () {\n            return this.ispageWidth;\n        },\n        set: function (value) {\n            this.ispageWidth = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"isChildGrid\", {\n        /**\n         * Gets or set if grid `is nested grid`.\n         * @private\n         */\n        get: function () {\n            return this.ischildGrid;\n        },\n        set: function (value) {\n            this.ischildGrid = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"size\", {\n        /**\n         * Gets or set if grid ' is split or not'\n         * @public\n         */\n        // public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }public get isGridSplit() : boolean {\n        //     return this.isgridSplit;\n        // }\n        // public set isGridSplit(value : boolean) {\n        //     this.isgridSplit = value;\n        // }\n        /**\n         * Gets the `size`.\n         * @private\n         */\n        get: function () {\n            if ((this.gridSize.width === 0 || typeof this.gridSize.width === 'undefined') && this.gridSize.height === 0) {\n                this.gridSize = this.measure();\n            }\n            return this.gridSize;\n            // } else {\n            //     return this.gridSize;\n            // }\n        },\n        set: function (value) {\n            this.gridSize = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"ParentCell\", {\n        get: function () {\n            return this.parentCell;\n        },\n        set: function (value) {\n            this.parentCell = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PdfGrid.prototype, \"LayoutFormat\", {\n        get: function () {\n            return this.layoutFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PdfGrid.prototype.draw = function (arg1, arg2, arg3, arg4) {\n        if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2.x, arg2.y);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && typeof arg4 === 'undefined') {\n            return this.drawHelper(arg1, arg2, arg3, null);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'undefined') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else if (arg2 instanceof PointF && typeof arg2.width === 'undefined' && arg3 instanceof PdfLayoutFormat) {\n            return this.drawHelper(arg1, arg2.x, arg2.y, arg3);\n        }\n        else if (typeof arg2 === 'number' && typeof arg3 === 'number' && (arg4 instanceof PdfLayoutFormat || arg4 == null)) {\n            var width = (arg1.graphics.clientSize.width - arg2);\n            var layoutRectangle = new RectangleF(arg2, arg3, width, 0);\n            return this.drawHelper(arg1, layoutRectangle, arg4);\n        }\n        else if (arg2 instanceof RectangleF && typeof arg2.width !== 'undefined' && typeof arg3 === 'boolean') {\n            return this.drawHelper(arg1, arg2, null);\n        }\n        else {\n            return this.drawHelper(arg1, arg2, arg3);\n        }\n    };\n    /**\n     * `measures` this instance.\n     * @private\n     */\n    PdfGrid.prototype.measure = function () {\n        var height = 0;\n        var width = this.columns.width;\n        for (var i = 0; i < this.headers.count; i++) {\n            var row = this.headers.getHeader(i);\n            height += row.height;\n        }\n        for (var i = 0; i < this.rows.count; i++) {\n            var row = this.rows.getRow(i);\n            height += row.height;\n        }\n        return new SizeF(width, height);\n    };\n    PdfGrid.prototype.onBeginCellDraw = function (args) {\n        if (this.raiseBeginCellDraw) {\n            this.beginCellDraw(this, args);\n        }\n    };\n    PdfGrid.prototype.onEndCellDraw = function (args) {\n        if (this.raiseEndCellDraw) {\n            this.endCellDraw(this, args);\n        }\n    };\n    /**\n     * `Layouts` the specified graphics.\n     * @private\n     */\n    PdfGrid.prototype.layout = function (param) {\n        var width = param.bounds.width;\n        var height = param.bounds.height;\n        var hasChanged = false;\n        if (typeof param.bounds.width === 'undefined' || param.bounds.width === 0) {\n            width = param.page.getClientSize().width - param.bounds.x;\n            hasChanged = true;\n        }\n        if (typeof param.bounds.height === 'undefined' || param.bounds.height === 0) {\n            height = param.page.getClientSize().height - param.bounds.y;\n            hasChanged = true;\n        }\n        if (hasChanged) {\n            param.bounds = new RectangleF(param.bounds.x, param.bounds.y, width, height);\n        }\n        if (this.rows.count !== 0) {\n            var currentRow = this.rows.getRow(0).cells.getCell(0).style;\n            if (currentRow.borders != null && ((currentRow.borders.left != null && currentRow.borders.left.width !== 1) ||\n                (currentRow.borders.top != null && currentRow.borders.top.width !== 1))) {\n                var x = currentRow.borders.left.width / 2;\n                var y = currentRow.borders.top.width / 2;\n                if (param.bounds.x === PdfBorders.default.right.width / 2 && param.bounds.y === PdfBorders.default.right.width / 2) {\n                    var newBound = new RectangleF(x, y, this.gridSize.width, this.gridSize.height);\n                    param.bounds = newBound;\n                }\n            }\n        }\n        this.setSpan();\n        this.checkSpan();\n        this.layoutFormat = param.format;\n        this.gridLocation = param.bounds;\n        var layouter = new PdfGridLayouter(this);\n        var result = (layouter.Layouter(param));\n        return result;\n    };\n    PdfGrid.prototype.setSpan = function () {\n        var colSpan = 1;\n        var rowSpan = 1;\n        var currentCellIndex = 0;\n        var currentRowIndex = 0;\n        var maxSpan = 0;\n        var rowCount = this.headers.count;\n        for (var i = 0; i < rowCount; i++) {\n            var row = this.headers.getHeader(i);\n            maxSpan = 0;\n            var colCount = row.cells.count;\n            for (var j = 0; j < colCount; j++) {\n                var cell = row.cells.getCell(j);\n                maxSpan = Math.max(maxSpan, cell.rowSpan);\n                //Skip setting span map for already coverted rows/columns.\n                if (!cell.isCellMergeContinue && !cell.isRowMergeContinue && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                    if (cell.columnSpan + j > row.cells.count) {\n                        throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    }\n                    if (cell.rowSpan + i > this.headers.count) {\n                        throw new Error('Invalid span specified at Header ' + j.toString() + ' column ' + i.toString());\n                    }\n                    // if (this.rows.count !== 0 && cell.rowSpan + i > this.rows.count) {\n                    //     throw new Error('Invalid span specified at row ' + j.toString() + ' column ' + i.toString());\n                    // }\n                    if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                        colSpan = cell.columnSpan;\n                        rowSpan = cell.rowSpan;\n                        currentCellIndex = j;\n                        currentRowIndex = i;\n                        cell.isCellMergeStart = true;\n                        cell.isRowMergeStart = true;\n                        //Set Column merges for first row\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            row.cells.getCell(currentCellIndex).rowSpan = rowSpan;\n                            colSpan--;\n                        }\n                        currentCellIndex = j;\n                        colSpan = cell.columnSpan;\n                        //Set Row Merges and column merges foreach subsequent rows.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                            rowSpan--;\n                            while (colSpan > 1) {\n                                currentCellIndex++;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                this.headers.getHeader(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                colSpan--;\n                            }\n                            colSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                        }\n                    }\n                    else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                        colSpan = cell.columnSpan;\n                        currentCellIndex = j;\n                        cell.isCellMergeStart = true;\n                        //Set Column merges.\n                        while (colSpan > 1) {\n                            currentCellIndex++;\n                            row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                            colSpan--;\n                        }\n                    }\n                    else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                        rowSpan = cell.rowSpan;\n                        currentRowIndex = i;\n                        //Set row Merges.\n                        while (rowSpan > 1) {\n                            currentRowIndex++;\n                            this.headers.getHeader(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                            rowSpan--;\n                        }\n                    }\n                }\n            }\n            row.maximumRowSpan = maxSpan;\n        }\n    };\n    PdfGrid.prototype.checkSpan = function () {\n        var cellcolSpan;\n        var cellrowSpan = 1;\n        var cellmaxSpan = 0;\n        var currentCellIndex;\n        var currentRowIndex = 0;\n        cellcolSpan = cellrowSpan = 1;\n        currentCellIndex = currentRowIndex = 0;\n        if (this.hasRowSpanSpan || this.hasColumnSpan) {\n            var rowCount = this.rows.count;\n            for (var i = 0; i < rowCount; i++) {\n                var row = this.rows.getRow(i);\n                cellmaxSpan = 0;\n                var colCount = row.cells.count;\n                for (var j = 0; j < colCount; j++) {\n                    var cell = row.cells.getCell(j);\n                    cellmaxSpan = Math.max(cellmaxSpan, cell.rowSpan);\n                    //Skip setting span map for already coverted rows/columns.\n                    if (!cell.isCellMergeContinue && !cell.isRowMergeContinue\n                        && (cell.columnSpan > 1 || cell.rowSpan > 1)) {\n                        if (cell.columnSpan + j > row.cells.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.rowSpan + i > this.rows.count) {\n                            throw new Error('Invalid span specified at row  ' + j.toString() + ' column ' + i.toString());\n                        }\n                        if (cell.columnSpan > 1 && cell.rowSpan > 1) {\n                            cellcolSpan = cell.columnSpan;\n                            cellrowSpan = cell.rowSpan;\n                            currentCellIndex = j;\n                            currentRowIndex = i;\n                            cell.isCellMergeStart = true;\n                            cell.isRowMergeStart = true;\n                            //Set Column merges for first row\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                row.cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                            currentCellIndex = j;\n                            cellcolSpan = cell.columnSpan;\n                            //Set Row Merges and column merges foreach subsequent rows.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                cellrowSpan--;\n                                while (cellcolSpan > 1) {\n                                    currentCellIndex++;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                    this.rows.getRow(currentRowIndex).cells.getCell(currentCellIndex).isRowMergeContinue = true;\n                                    cellcolSpan--;\n                                }\n                                cellcolSpan = cell.columnSpan;\n                                currentCellIndex = j;\n                            }\n                        }\n                        else if (cell.columnSpan > 1 && cell.rowSpan === 1) {\n                            cellcolSpan = cell.columnSpan;\n                            currentCellIndex = j;\n                            cell.isCellMergeStart = true;\n                            //Set Column merges.\n                            while (cellcolSpan > 1) {\n                                currentCellIndex++;\n                                row.cells.getCell(currentCellIndex).isCellMergeContinue = true;\n                                cellcolSpan--;\n                            }\n                        }\n                        else if (cell.columnSpan === 1 && cell.rowSpan > 1) {\n                            cellrowSpan = cell.rowSpan;\n                            currentRowIndex = i;\n                            //Set row Merges.\n                            while (cellrowSpan > 1) {\n                                currentRowIndex++;\n                                this.rows.getRow(currentRowIndex).cells.getCell(j).isRowMergeContinue = true;\n                                cellrowSpan--;\n                            }\n                        }\n                    }\n                }\n                row.maximumRowSpan = cellmaxSpan;\n            }\n        }\n    };\n    PdfGrid.prototype.measureColumnsWidth = function (bounds) {\n        if (typeof bounds !== 'undefined') {\n            this.isPageWidth = false;\n            var widths = this.columns.getDefaultWidths(bounds.width - bounds.x);\n            //let tempWidth : number = this.columns.getColumn(0).width;\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                // if (this.columns.getColumn(i).width < 0)\n                //     this.columns.getColumn(i).columnWidth = widths[i];\n                // else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth && widths[i]>0 && this.isComplete)\n                this.columns.getColumn(i).columnWidth = widths[i];\n                this.tempWidth = widths[i];\n            }\n            if (this.ParentCell != null && this.style.allowHorizontalOverflow == false && this.ParentCell.row.grid.style.allowHorizontalOverflow == false) {\n                var padding = 0;\n                var columnWidth = 0;\n                var columnCount = this.columns.count;\n                var childGridColumnWidth = 0;\n                if (this.ParentCell.style.cellPadding != null || typeof this.ParentCell.style.cellPadding !== 'undefined') {\n                    if (typeof this.ParentCell.style.cellPadding.left != 'undefined' && this.ParentCell.style.cellPadding.hasLeftPad) {\n                        padding += this.ParentCell.style.cellPadding.left;\n                    }\n                    if (typeof this.ParentCell.style.cellPadding.right != 'undefined' && this.ParentCell.style.cellPadding.hasRightPad) {\n                        padding += this.ParentCell.style.cellPadding.right;\n                    }\n                }\n                for (var i = 0; i < this.ParentCell.columnSpan; i++) {\n                    columnWidth += this.ParentCell.row.grid.columns.getColumn(this.parentCellIndex + i).width;\n                }\n                for (var j = 0; j < this.columns.count; j++) {\n                    if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                        columnWidth -= this.gridColumns.getColumn(j).width;\n                        columnCount--;\n                    }\n                }\n                if ((this.ParentCell.row.grid.style.cellPadding != null || typeof this.ParentCell.row.grid.style.cellPadding != 'undefined')) {\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.top != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasTopPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.top;\n                    }\n                    if (typeof this.ParentCell.row.grid.style.cellPadding.bottom != 'undefined' && this.ParentCell.row.grid.style.cellPadding.hasBottomPad) {\n                        padding += this.ParentCell.row.grid.style.cellPadding.bottom;\n                    }\n                }\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    columnWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n                if (columnWidth > padding) {\n                    childGridColumnWidth = (columnWidth - padding) / columnCount;\n                    this.tempWidth = childGridColumnWidth;\n                    if (this.ParentCell != null) {\n                        for (var j = 0; j < this.columns.count; j++) {\n                            if (!this.columns.getColumn(j).isCustomWidth)\n                                this.columns.getColumn(j).columnWidth = childGridColumnWidth;\n                        }\n                    }\n                }\n            }\n            // if (this.ParentCell != null && this.ParentCell.row.width > 0)\n            // {\n            //     if (this.isChildGrid && this.gridSize.width > this.ParentCell.row.width)\n            //     {\n            //         widths = this.columns.getDefaultWidths(bounds.width);\n            //         for (let i : number = 0; i < this.columns.count; i++)\n            //         {\n            //             this.columns.getColumn(i).width = widths[i];\n            //         }\n            //     }\n            // }\n        }\n        else {\n            var widths = [this.columns.count];\n            for (var n = 0; n < this.columns.count; n++) {\n                widths[n] = 0;\n            }\n            var cellWidth = 0;\n            var cellWidths = 0;\n            if ((typeof this.isChildGrid === 'undefined' && typeof this.gridLocation !== 'undefined') || (this.isChildGrid === null && typeof this.gridLocation !== 'undefined')) {\n                this.initialWidth = this.gridLocation.width;\n            }\n            if (this.headers.count > 0) {\n                var colCount_1 = this.headers.getHeader(0).cells.count;\n                var rowCount = this.headers.count;\n                for (var i = 0; i < colCount_1; i++) {\n                    cellWidth = 0;\n                    for (var j = 0; j < rowCount; j++) {\n                        var rowWidth = Math.min(this.initialWidth, this.headers.getHeader(j).cells.getCell(i).width);\n                        cellWidth = Math.max(cellWidth, rowWidth);\n                    }\n                    widths[i] = cellWidth;\n                }\n            }\n            // else {\n            //     let colCount : number = this.rows.getRow(0).cells.count;\n            //     let rowCount : number = this.rows.count;\n            //     for (let i : number = 0; i < colCount; i++) {\n            //         cellWidth = 0;\n            //         for (let j : number = 0; j < rowCount; j++) {\n            //             let rowWidth : number = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n            //             cellWidth = Math.max(cellWidth, rowWidth);\n            //         }\n            //         widths[i] = cellWidth;\n            //     }\n            // }\n            cellWidth = 0;\n            for (var i = 0, colCount_2 = this.columns.count; i < colCount_2; i++) {\n                for (var j = 0, rowCount = this.rows.count; j < rowCount; j++) {\n                    if ((this.rows.getRow(j).cells.getCell(i).columnSpan == 1 && !this.rows.getRow(j).cells.getCell(i).isCellMergeContinue) || this.rows.getRow(j).cells.getCell(i).value != null) {\n                        if (this.rows.getRow(j).cells.getCell(i).value != null && !this.rows.getRow(j).grid.style.allowHorizontalOverflow) {\n                            var value = this.rows.getRow(j).grid.style.cellPadding.right +\n                                this.rows.getRow(j).grid.style.cellPadding.left\n                                + this.rows.getRow(j).cells.getCell(i).style.borders.left.width / 2;\n                            //  if (this.initialWidth != 0 )\n                            //         (this.rows.getRow(j).cells.getCell(i).value as PdfGrid).initialWidth = this.initialWidth - value;\n                        }\n                        var rowWidth = 0;\n                        rowWidth = this.initialWidth > 0.0 ? Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width) : this.rows.getRow(j).cells.getCell(i).width;\n                        // let internalWidth : number = this.rows.getRow(j).cells.getCell(i).width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.left.width;\n                        // internalWidth += this.rows.getRow(j).cells.getCell(i).style.borders.right.width;\n                        // let internalHeight : number = this.rows.getRow(j).cells.getCell(i).height;\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.top.width);\n                        // internalHeight += (this.rows.getRow(j).cells.getCell(i).style.borders.bottom.width);\n                        // let isCorrectWidth : boolean = (internalWidth + this.gridLocation.x) > this.currentGraphics.clientSize.width;\n                        // let isCorrectHeight : boolean = (internalHeight + this.gridLocation.y) > this.currentGraphics.clientSize.height;\n                        // if (isCorrectWidth || isCorrectHeight) {\n                        //     throw Error('Image size exceeds client size of the page. Can not insert this image');\n                        // }\n                        // rowWidth = Math.min(this.initialWidth, this.rows.getRow(j).cells.getCell(i).width);\n                        cellWidth = Math.max(widths[i], Math.max(cellWidth, rowWidth));\n                        cellWidth = Math.max(this.columns.getColumn(i).width, cellWidth);\n                    }\n                }\n                if (this.rows.count != 0)\n                    widths[i] = cellWidth;\n                cellWidth = 0;\n            }\n            for (var i = 0, RowCount = this.rows.count; i < RowCount; i++) {\n                for (var j = 0, ColCount = this.columns.count; j < ColCount; j++) {\n                    if (this.rows.getRow(i).cells.getCell(j).columnSpan > 1) {\n                        var total = widths[j];\n                        for (var k = 1; k < this.rows.getRow(i).cells.getCell(j).columnSpan; k++) {\n                            total += widths[j + k];\n                        }\n                        // if (this.rows.getRow(i).cells.getCell(j).width > total)\n                        // {\n                        //     let extendedWidth : number = this.rows.getRow(i).cells.getCell(j).width - total;\n                        //     extendedWidth = extendedWidth / this.rows.getRow(i).cells.getCell(j).columnSpan;\n                        //     for (let k : number = j; k < j + this.rows.getRow(i).cells.getCell(j).columnSpan; k++)\n                        //         widths[k] += extendedWidth;\n                        // }\n                    }\n                }\n            }\n            // if (this.isChildGrid && this.initialWidth != 0)\n            // {\n            //     widths = this.columns.getDefaultWidths(this.initialWidth);\n            // }\n            for (var i = 0, count = this.columns.count; i < count; i++) {\n                if (this.columns.getColumn(i).width <= 0)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n                else if (this.columns.getColumn(i).width > 0 && !this.columns.getColumn(i).isCustomWidth)\n                    this.columns.getColumn(i).columnWidth = widths[i];\n            }\n            var padding = 0;\n            var colWidth = 0;\n            var colCount = this.columns.count;\n            var childGridColWidth = 0;\n            colWidth = this.tempWidth;\n            for (var j = 0; j < this.columns.count; j++) {\n                if (this.gridColumns.getColumn(j).width > 0 && this.gridColumns.getColumn(j).isCustomWidth) {\n                    colWidth -= this.gridColumns.getColumn(j).width;\n                    colCount--;\n                }\n            }\n            // if (this.style.cellSpacing != 0){\n            //     colWidth -= this.style.cellSpacing * 2;\n            // }\n            if (colWidth > 0) {\n                if (this.ParentCell.row.grid.style.cellSpacing != 0) {\n                    colWidth -= this.ParentCell.row.grid.style.cellSpacing * 2;\n                }\n            }\n            if (colWidth > padding) {\n                childGridColWidth = (colWidth) / colCount;\n                if (this.ParentCell != null) {\n                    for (var j = 0; j < this.columns.count; j++) {\n                        if (!this.columns.getColumn(j).isCustomWidth)\n                            this.columns.getColumn(j).columnWidth = childGridColWidth;\n                    }\n                }\n            }\n        }\n    };\n    return PdfGrid;\n}(PdfLayoutElement));\nexport { PdfGrid };\n"]},"metadata":{},"sourceType":"module"}