{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Row } from '../models/row';\nimport { isNullOrUndefined, extend, setValue } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { getForeignData, getUid } from '../../grid/base/util';\n/**\n * GroupModelGenerator is used to generate group caption rows and data rows.\n *\n * @hidden\n */\n\nvar GroupModelGenerator =\n/** @class */\nfunction (_super) {\n  __extends(GroupModelGenerator, _super);\n\n  function GroupModelGenerator(parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.rows = [];\n    /** @hidden */\n\n    _this.index = 0;\n    _this.infiniteChildCount = 0;\n    _this.renderInfiniteAgg = true;\n    _this.parent = parent;\n    _this.summaryModelGen = new GroupSummaryModelGenerator(parent);\n    _this.captionModelGen = new CaptionSummaryModelGenerator(parent);\n    return _this;\n  }\n\n  GroupModelGenerator.prototype.generateRows = function (data, args) {\n    if (this.parent.groupSettings.columns.length === 0) {\n      return _super.prototype.generateRows.call(this, data, args);\n    }\n\n    this.isInfiniteScroll = args.requestType === 'infiniteScroll';\n    this.rows = [];\n    this.index = this.parent.enableVirtualization || this.isInfiniteScroll ? args.startIndex : 0;\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      this.infiniteChildCount = 0;\n      this.renderInfiniteAgg = true;\n      this.getGroupedRecords(0, data[i], data.level, i, undefined, this.rows.length);\n    }\n\n    this.index = 0;\n\n    if (this.parent.isCollapseStateEnabled()) {\n      this.ensureRowVisibility();\n    }\n\n    return this.rows;\n  };\n\n  GroupModelGenerator.prototype.getGroupedRecords = function (index, data, raw, parentid, childId, tIndex, parentUid) {\n    var _a;\n\n    var level = raw;\n\n    if (isNullOrUndefined(data.items)) {\n      if (isNullOrUndefined(data.GroupGuid)) {\n        this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length, parentUid));\n      } else {\n        for (var j = 0, len = data.length; j < len; j++) {\n          this.getGroupedRecords(index, data[j], data.level, parentid, index, this.rows.length, parentUid);\n        }\n      }\n    } else {\n      var preCaption = void 0;\n      var captionRow = this.generateCaptionRow(data, index, parentid, childId, tIndex, parentUid);\n\n      if (this.isInfiniteScroll) {\n        preCaption = this.getPreCaption(index, captionRow.data.key);\n      }\n\n      if (!preCaption) {\n        this.rows = this.rows.concat(captionRow);\n      } else {\n        captionRow.uid = preCaption.uid;\n      }\n\n      if (data.items && data.items.length) {\n        this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length, captionRow.uid);\n      }\n\n      if (this.parent.aggregates.length && this.isRenderAggregate(captionRow)) {\n        var rowCnt = this.rows.length;\n\n        (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, {\n          level: level,\n          parentUid: captionRow.uid\n        }));\n\n        for (var i = rowCnt - 1; i >= 0; i--) {\n          if (this.rows[i].isCaptionRow) {\n            this.rows[i].aggregatesCount = this.rows.length - rowCnt;\n          } else if (!this.rows[i].isCaptionRow && !this.rows[i].isDataRow) {\n            break;\n          }\n        }\n      }\n\n      if (preCaption) {\n        this.setInfiniteRowVisibility(preCaption);\n      }\n    }\n  };\n\n  GroupModelGenerator.prototype.isRenderAggregate = function (data) {\n    if (this.parent.enableInfiniteScrolling) {\n      if (!this.renderInfiniteAgg) {\n        return false;\n      }\n\n      this.getPreCaption(data.indent, data.data.key);\n      this.renderInfiniteAgg = data.data.count === this.infiniteChildCount;\n      return this.renderInfiniteAgg;\n    }\n\n    return !this.parent.enableInfiniteScrolling;\n  };\n\n  GroupModelGenerator.prototype.getPreCaption = function (indent, key) {\n    var rowObj = this.parent.getRowsObject().concat(this.rows);\n    var preCap;\n    this.infiniteChildCount = 0;\n    var i = rowObj.length;\n\n    while (i--) {\n      if (rowObj[i].isCaptionRow && rowObj[i].indent === indent && rowObj[i].data.key === key) {\n        preCap = rowObj[i];\n      }\n\n      if (rowObj[i].indent === indent || rowObj[i].indent < indent) {\n        break;\n      }\n\n      if (rowObj[i].indent === indent + 1) {\n        this.infiniteChildCount++;\n      }\n    }\n\n    return preCap;\n  };\n\n  GroupModelGenerator.prototype.getCaptionRowCells = function (field, indent, data) {\n    var cells = [];\n    var visibles = [];\n    var column = this.parent.getColumnByField(field);\n    var indexes = this.parent.getColumnIndexesInView();\n\n    if (this.parent.enableColumnVirtualization) {\n      column = this.parent.columns.filter(function (c) {\n        return c.field === field;\n      })[0];\n    }\n\n    var groupedLen = this.parent.groupSettings.columns.length;\n    var gObj = this.parent;\n\n    if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {\n      for (var i = 0; i < indent; i++) {\n        cells.push(this.generateIndentCell());\n      }\n\n      cells.push(this.generateCell({}, null, CellType.Expand));\n    }\n\n    indent = this.parent.enableColumnVirtualization ? 1 : this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) - indent + (this.parent.getVisibleColumns().length ? -1 : 0); //Captionsummary cells will be added here.\n\n    if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {\n      var captionCells = this.captionModelGen.generateRows(data)[0];\n      extend(data, captionCells.data);\n      var cIndex_1 = 0;\n      captionCells.cells.some(function (cell, index) {\n        cIndex_1 = index;\n        return cell.visible && cell.isDataCell;\n      });\n      visibles = captionCells.cells.slice(cIndex_1).filter(function (cell) {\n        return cell.visible;\n      });\n\n      if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {\n        visibles = visibles.slice(1);\n      }\n\n      if (this.parent.getVisibleColumns().length === 1) {\n        visibles = [];\n      }\n\n      indent = indent - visibles.length;\n    }\n\n    var cols = !this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns();\n    var wFlag = true;\n\n    for (var j = 0; j < cols.length; j++) {\n      var tmpFlag = wFlag && indexes.indexOf(indent) !== -1;\n\n      if (tmpFlag) {\n        wFlag = false;\n      }\n\n      var cellType = !this.parent.enableColumnVirtualization || tmpFlag ? CellType.GroupCaption : CellType.GroupCaptionEmpty;\n      indent = this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;\n\n      if (gObj.isRowDragable()) {\n        indent++;\n      }\n\n      cells.push(this.generateCell(column, null, cellType, indent));\n    }\n\n    cells.push.apply(cells, visibles);\n    return cells;\n  };\n  /**\n   * @param {GroupedData} data - specifies the data\n   * @param {number} indent - specifies the indent\n   * @param {number} parentID - specifies the parentID\n   * @param {number} childID - specifies the childID\n   * @param {number} tIndex - specifies the TIndex\n   * @param {string} parentUid - specifies the ParentUid\n   * @returns {Row<Column>} returns the Row object\n   * @hidden\n   */\n\n\n  GroupModelGenerator.prototype.generateCaptionRow = function (data, indent, parentID, childID, tIndex, parentUid) {\n    var options = {};\n    var records = 'records';\n    var col = this.parent.getColumnByField(data.field);\n    options.data = extend({}, data);\n\n    if (col) {\n      options.data.field = data.field;\n    }\n\n    options.isDataRow = false;\n    options.isExpand = !this.parent.groupSettings.enableLazyLoading && !this.parent.isCollapseStateEnabled();\n    options.parentGid = parentID;\n    options.childGid = childID;\n    options.tIndex = tIndex;\n    options.isCaptionRow = true;\n    options.parentUid = parentUid;\n    options.gSummary = !isNullOrUndefined(data.items[records]) ? data.items[records].length : data.items.length;\n    options.uid = getUid('grid-row');\n    var row = new Row(options);\n    row.indent = indent;\n    this.getForeignKeyData(row);\n    row.cells = this.getCaptionRowCells(data.field, indent, row.data);\n    return row;\n  };\n\n  GroupModelGenerator.prototype.getForeignKeyData = function (row) {\n    var data = row.data;\n    var col = this.parent.getColumnByField(data.field);\n\n    if (col && col.isForeignColumn && col.isForeignColumn()) {\n      var fkValue = isNullOrUndefined(data.key) ? '' : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col);\n      setValue('foreignKey', fkValue, row.data);\n    }\n  };\n  /**\n   * @param {Object[]} data - specifies the data\n   * @param {number} indent - specifies the indent\n   * @param {number} childID - specifies the childID\n   * @param {number} tIndex - specifies the tIndex\n   * @param {string} parentUid - specifies the ParentUid\n   * @returns {Row<Column>[]} returns the row object\n   * @hidden\n   */\n\n\n  GroupModelGenerator.prototype.generateDataRows = function (data, indent, childID, tIndex, parentUid) {\n    var rows = [];\n    var indexes = this.parent.getColumnIndexesInView();\n\n    for (var i = 0, len = data.length; i < len; i++, tIndex++) {\n      rows[i] = this.generateRow(data[i], this.index, i ? undefined : 'e-firstchildrow', indent, childID, tIndex, parentUid);\n\n      for (var j = 0; j < indent; j++) {\n        if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {\n          continue;\n        }\n\n        rows[i].cells.unshift(this.generateIndentCell());\n      }\n\n      this.index++;\n    }\n\n    return rows;\n  };\n\n  GroupModelGenerator.prototype.generateIndentCell = function () {\n    return this.generateCell({}, null, CellType.Indent);\n  };\n\n  GroupModelGenerator.prototype.refreshRows = function (input) {\n    var indexes = this.parent.getColumnIndexesInView();\n\n    for (var i = 0; i < input.length; i++) {\n      if (input[i].isDataRow) {\n        input[i].cells = this.generateCells(input[i]);\n\n        for (var j = 0; j < input[i].indent; j++) {\n          if (this.parent.enableColumnVirtualization && indexes.indexOf(input[i].indent) === -1) {\n            continue;\n          }\n\n          input[i].cells.unshift(this.generateIndentCell());\n        }\n      } else {\n        var cRow = this.generateCaptionRow(input[i].data, input[i].indent);\n        input[i].cells = cRow.cells;\n      }\n    }\n\n    return input;\n  };\n\n  GroupModelGenerator.prototype.setInfiniteRowVisibility = function (caption) {\n    if (!caption.isExpand || caption.visible === false) {\n      for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n        var row = _a[_i];\n\n        if (row.parentUid === caption.uid) {\n          row.visible = false;\n\n          if (row.isCaptionRow) {\n            this.setInfiniteRowVisibility(row);\n          }\n        }\n      }\n    }\n  };\n\n  GroupModelGenerator.prototype.ensureRowVisibility = function () {\n    for (var i = 0; i < this.rows.length; i++) {\n      var row = this.rows[i];\n\n      if (!row.isCaptionRow) {\n        continue;\n      }\n\n      for (var j = i + 1; j < this.rows.length; j++) {\n        var childRow = this.rows[j];\n\n        if (row.uid === childRow.parentUid) {\n          this.rows[j].visible = row.isExpand;\n        }\n      }\n    }\n  };\n\n  return GroupModelGenerator;\n}(RowModelGenerator);\n\nexport { GroupModelGenerator };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-grids/src/grid/services/group-model-generator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Row","isNullOrUndefined","extend","setValue","CellType","RowModelGenerator","GroupSummaryModelGenerator","CaptionSummaryModelGenerator","getForeignData","getUid","GroupModelGenerator","_super","parent","_this","call","rows","index","infiniteChildCount","renderInfiniteAgg","summaryModelGen","captionModelGen","generateRows","data","args","groupSettings","columns","length","isInfiniteScroll","requestType","enableVirtualization","startIndex","i","len","getGroupedRecords","level","undefined","isCollapseStateEnabled","ensureRowVisibility","raw","parentid","childId","tIndex","parentUid","_a","items","GroupGuid","concat","generateDataRows","j","preCaption","captionRow","generateCaptionRow","getPreCaption","key","uid","aggregates","isRenderAggregate","rowCnt","push","apply","isCaptionRow","aggregatesCount","isDataRow","setInfiniteRowVisibility","enableInfiniteScrolling","indent","count","rowObj","getRowsObject","preCap","getCaptionRowCells","field","cells","visibles","column","getColumnByField","indexes","getColumnIndexesInView","enableColumnVirtualization","filter","c","groupedLen","gObj","indexOf","generateIndentCell","generateCell","Expand","getVisibleColumns","detailTemplate","childGrid","isEmpty","captionCells","cIndex_1","some","cell","visible","isDataCell","slice","cols","getColumns","wFlag","tmpFlag","cellType","GroupCaption","GroupCaptionEmpty","isRowDragable","parentID","childID","options","records","col","isExpand","enableLazyLoading","parentGid","childGid","gSummary","row","getForeignKeyData","isForeignColumn","fkValue","valueAccessor","foreignKeyValue","generateRow","unshift","Indent","refreshRows","input","generateCells","cRow","caption","_i","childRow"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Row } from '../models/row';\nimport { isNullOrUndefined, extend, setValue } from '@syncfusion/ej2-base';\nimport { CellType } from '../base/enum';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { GroupSummaryModelGenerator, CaptionSummaryModelGenerator } from '../services/summary-model-generator';\nimport { getForeignData, getUid } from '../../grid/base/util';\n/**\n * GroupModelGenerator is used to generate group caption rows and data rows.\n *\n * @hidden\n */\nvar GroupModelGenerator = /** @class */ (function (_super) {\n    __extends(GroupModelGenerator, _super);\n    function GroupModelGenerator(parent) {\n        var _this = _super.call(this, parent) || this;\n        _this.rows = [];\n        /** @hidden */\n        _this.index = 0;\n        _this.infiniteChildCount = 0;\n        _this.renderInfiniteAgg = true;\n        _this.parent = parent;\n        _this.summaryModelGen = new GroupSummaryModelGenerator(parent);\n        _this.captionModelGen = new CaptionSummaryModelGenerator(parent);\n        return _this;\n    }\n    GroupModelGenerator.prototype.generateRows = function (data, args) {\n        if (this.parent.groupSettings.columns.length === 0) {\n            return _super.prototype.generateRows.call(this, data, args);\n        }\n        this.isInfiniteScroll = (args.requestType === 'infiniteScroll');\n        this.rows = [];\n        this.index = this.parent.enableVirtualization || this.isInfiniteScroll ? args.startIndex : 0;\n        for (var i = 0, len = data.length; i < len; i++) {\n            this.infiniteChildCount = 0;\n            this.renderInfiniteAgg = true;\n            this.getGroupedRecords(0, data[i], data.level, i, undefined, this.rows.length);\n        }\n        this.index = 0;\n        if (this.parent.isCollapseStateEnabled()) {\n            this.ensureRowVisibility();\n        }\n        return this.rows;\n    };\n    GroupModelGenerator.prototype.getGroupedRecords = function (index, data, raw, parentid, childId, tIndex, parentUid) {\n        var _a;\n        var level = raw;\n        if (isNullOrUndefined(data.items)) {\n            if (isNullOrUndefined(data.GroupGuid)) {\n                this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length, parentUid));\n            }\n            else {\n                for (var j = 0, len = data.length; j < len; j++) {\n                    this.getGroupedRecords(index, data[j], data.level, parentid, index, this.rows.length, parentUid);\n                }\n            }\n        }\n        else {\n            var preCaption = void 0;\n            var captionRow = this.generateCaptionRow(data, index, parentid, childId, tIndex, parentUid);\n            if (this.isInfiniteScroll) {\n                preCaption = this.getPreCaption(index, captionRow.data.key);\n            }\n            if (!preCaption) {\n                this.rows = this.rows.concat(captionRow);\n            }\n            else {\n                captionRow.uid = preCaption.uid;\n            }\n            if (data.items && data.items.length) {\n                this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length, captionRow.uid);\n            }\n            if (this.parent.aggregates.length && this.isRenderAggregate(captionRow)) {\n                var rowCnt = this.rows.length;\n                (_a = this.rows).push.apply(_a, this.summaryModelGen.generateRows(data, { level: level, parentUid: captionRow.uid }));\n                for (var i = rowCnt - 1; i >= 0; i--) {\n                    if (this.rows[i].isCaptionRow) {\n                        this.rows[i].aggregatesCount = this.rows.length - rowCnt;\n                    }\n                    else if (!this.rows[i].isCaptionRow && !this.rows[i].isDataRow) {\n                        break;\n                    }\n                }\n            }\n            if (preCaption) {\n                this.setInfiniteRowVisibility(preCaption);\n            }\n        }\n    };\n    GroupModelGenerator.prototype.isRenderAggregate = function (data) {\n        if (this.parent.enableInfiniteScrolling) {\n            if (!this.renderInfiniteAgg) {\n                return false;\n            }\n            this.getPreCaption(data.indent, data.data.key);\n            this.renderInfiniteAgg = data.data.count === this.infiniteChildCount;\n            return this.renderInfiniteAgg;\n        }\n        return !this.parent.enableInfiniteScrolling;\n    };\n    GroupModelGenerator.prototype.getPreCaption = function (indent, key) {\n        var rowObj = this.parent.getRowsObject().concat(this.rows);\n        var preCap;\n        this.infiniteChildCount = 0;\n        var i = rowObj.length;\n        while (i--) {\n            if (rowObj[i].isCaptionRow && rowObj[i].indent === indent\n                && rowObj[i].data.key === key) {\n                preCap = rowObj[i];\n            }\n            if (rowObj[i].indent === indent || rowObj[i].indent < indent) {\n                break;\n            }\n            if (rowObj[i].indent === indent + 1) {\n                this.infiniteChildCount++;\n            }\n        }\n        return preCap;\n    };\n    GroupModelGenerator.prototype.getCaptionRowCells = function (field, indent, data) {\n        var cells = [];\n        var visibles = [];\n        var column = this.parent.getColumnByField(field);\n        var indexes = this.parent.getColumnIndexesInView();\n        if (this.parent.enableColumnVirtualization) {\n            column = this.parent.columns.filter(function (c) { return c.field === field; })[0];\n        }\n        var groupedLen = this.parent.groupSettings.columns.length;\n        var gObj = this.parent;\n        if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {\n            for (var i = 0; i < indent; i++) {\n                cells.push(this.generateIndentCell());\n            }\n            cells.push(this.generateCell({}, null, CellType.Expand));\n        }\n        indent = this.parent.enableColumnVirtualization ? 1 :\n            (this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) -\n                indent + (this.parent.getVisibleColumns().length ? -1 : 0));\n        //Captionsummary cells will be added here.\n        if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {\n            var captionCells = this.captionModelGen.generateRows(data)[0];\n            extend(data, captionCells.data);\n            var cIndex_1 = 0;\n            captionCells.cells.some(function (cell, index) { cIndex_1 = index; return cell.visible && cell.isDataCell; });\n            visibles = captionCells.cells.slice(cIndex_1).filter(function (cell) { return cell.visible; });\n            if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {\n                visibles = visibles.slice(1);\n            }\n            if (this.parent.getVisibleColumns().length === 1) {\n                visibles = [];\n            }\n            indent = indent - visibles.length;\n        }\n        var cols = (!this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns());\n        var wFlag = true;\n        for (var j = 0; j < cols.length; j++) {\n            var tmpFlag = wFlag && indexes.indexOf(indent) !== -1;\n            if (tmpFlag) {\n                wFlag = false;\n            }\n            var cellType = !this.parent.enableColumnVirtualization || tmpFlag ?\n                CellType.GroupCaption : CellType.GroupCaptionEmpty;\n            indent = this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;\n            if (gObj.isRowDragable()) {\n                indent++;\n            }\n            cells.push(this.generateCell(column, null, cellType, indent));\n        }\n        cells.push.apply(cells, visibles);\n        return cells;\n    };\n    /**\n     * @param {GroupedData} data - specifies the data\n     * @param {number} indent - specifies the indent\n     * @param {number} parentID - specifies the parentID\n     * @param {number} childID - specifies the childID\n     * @param {number} tIndex - specifies the TIndex\n     * @param {string} parentUid - specifies the ParentUid\n     * @returns {Row<Column>} returns the Row object\n     * @hidden\n     */\n    GroupModelGenerator.prototype.generateCaptionRow = function (data, indent, parentID, childID, tIndex, parentUid) {\n        var options = {};\n        var records = 'records';\n        var col = this.parent.getColumnByField(data.field);\n        options.data = extend({}, data);\n        if (col) {\n            options.data.field = data.field;\n        }\n        options.isDataRow = false;\n        options.isExpand = !this.parent.groupSettings.enableLazyLoading && !this.parent.isCollapseStateEnabled();\n        options.parentGid = parentID;\n        options.childGid = childID;\n        options.tIndex = tIndex;\n        options.isCaptionRow = true;\n        options.parentUid = parentUid;\n        options.gSummary = !isNullOrUndefined(data.items[records]) ? data.items[records].length : data.items.length;\n        options.uid = getUid('grid-row');\n        var row = new Row(options);\n        row.indent = indent;\n        this.getForeignKeyData(row);\n        row.cells = this.getCaptionRowCells(data.field, indent, row.data);\n        return row;\n    };\n    GroupModelGenerator.prototype.getForeignKeyData = function (row) {\n        var data = row.data;\n        var col = this.parent.getColumnByField(data.field);\n        if (col && col.isForeignColumn && col.isForeignColumn()) {\n            var fkValue = (isNullOrUndefined(data.key) ? '' : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col));\n            setValue('foreignKey', fkValue, row.data);\n        }\n    };\n    /**\n     * @param {Object[]} data - specifies the data\n     * @param {number} indent - specifies the indent\n     * @param {number} childID - specifies the childID\n     * @param {number} tIndex - specifies the tIndex\n     * @param {string} parentUid - specifies the ParentUid\n     * @returns {Row<Column>[]} returns the row object\n     * @hidden\n     */\n    GroupModelGenerator.prototype.generateDataRows = function (data, indent, childID, tIndex, parentUid) {\n        var rows = [];\n        var indexes = this.parent.getColumnIndexesInView();\n        for (var i = 0, len = data.length; i < len; i++, tIndex++) {\n            rows[i] = this.generateRow(data[i], this.index, i ? undefined : 'e-firstchildrow', indent, childID, tIndex, parentUid);\n            for (var j = 0; j < indent; j++) {\n                if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {\n                    continue;\n                }\n                rows[i].cells.unshift(this.generateIndentCell());\n            }\n            this.index++;\n        }\n        return rows;\n    };\n    GroupModelGenerator.prototype.generateIndentCell = function () {\n        return this.generateCell({}, null, CellType.Indent);\n    };\n    GroupModelGenerator.prototype.refreshRows = function (input) {\n        var indexes = this.parent.getColumnIndexesInView();\n        for (var i = 0; i < input.length; i++) {\n            if (input[i].isDataRow) {\n                input[i].cells = this.generateCells(input[i]);\n                for (var j = 0; j < input[i].indent; j++) {\n                    if (this.parent.enableColumnVirtualization && indexes.indexOf(input[i].indent) === -1) {\n                        continue;\n                    }\n                    input[i].cells.unshift(this.generateIndentCell());\n                }\n            }\n            else {\n                var cRow = this.generateCaptionRow(input[i].data, input[i].indent);\n                input[i].cells = cRow.cells;\n            }\n        }\n        return input;\n    };\n    GroupModelGenerator.prototype.setInfiniteRowVisibility = function (caption) {\n        if (!caption.isExpand || caption.visible === false) {\n            for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {\n                var row = _a[_i];\n                if (row.parentUid === caption.uid) {\n                    row.visible = false;\n                    if (row.isCaptionRow) {\n                        this.setInfiniteRowVisibility(row);\n                    }\n                }\n            }\n        }\n    };\n    GroupModelGenerator.prototype.ensureRowVisibility = function () {\n        for (var i = 0; i < this.rows.length; i++) {\n            var row = this.rows[i];\n            if (!row.isCaptionRow) {\n                continue;\n            }\n            for (var j = i + 1; j < this.rows.length; j++) {\n                var childRow = this.rows[j];\n                if (row.uid === childRow.parentUid) {\n                    this.rows[j].visible = row.isExpand;\n                }\n            }\n        }\n    };\n    return GroupModelGenerator;\n}(RowModelGenerator));\nexport { GroupModelGenerator };\n"]},"metadata":{},"sourceType":"module"}