{"ast":null,"code":"import { isUndefined, isNullOrUndefined, merge, setImmediate, setValue, isBlazor, getValue, extend } from './util';\nimport { addClass, removeClass } from './dom';\nimport { Observer } from './observer';\nvar isColEName = new RegExp(']');\n/* tslint:enable:no-any */\n\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n *\n * @private\n */\n\nvar Base =\n/** @class */\nfunction () {\n  /**\n   * Base constructor accept options and element\n   *\n   * @param {Object} options ?\n   * @param {string} element ?\n   */\n  function Base(options, element) {\n    this.isRendered = false;\n    this.isComplexArraySetter = false;\n    this.isServerRendered = false;\n    this.allowServerDataBinding = true;\n    this.isProtectedOnChange = true;\n    this.properties = {};\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.bulkChanges = {};\n    this.refreshing = false;\n    this.ignoreCollectionWatch = false; // eslint-disable-next-line\n\n    this.finalUpdate = function () {};\n\n    this.childChangedProperties = {};\n    this.modelObserver = new Observer(this);\n\n    if (!isUndefined(element)) {\n      if ('string' === typeof element) {\n        this.element = document.querySelector(element);\n      } else {\n        this.element = element;\n      }\n\n      if (!isNullOrUndefined(this.element)) {\n        this.isProtectedOnChange = false;\n        this.addInstance();\n      }\n    }\n\n    if (!isUndefined(options)) {\n      this.setProperties(options, true);\n    }\n\n    this.isDestroyed = false;\n  }\n  /** Property base section */\n\n  /**\n   * Function used to set bunch of property at a time.\n   *\n   * @private\n   * @param  {Object} prop - JSON object which holds components properties.\n   * @param  {boolean} muteOnChange ? - Specifies to true when we set properties.\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.setProperties = function (prop, muteOnChange) {\n    var prevDetection = this.isProtectedOnChange;\n    this.isProtectedOnChange = !!muteOnChange;\n    merge(this, prop);\n\n    if (muteOnChange !== true) {\n      merge(this.changedProperties, prop);\n      this.dataBind();\n    } else if (isBlazor() && this.isRendered) {\n      this.serverDataBind(prop);\n    }\n\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.isProtectedOnChange = prevDetection;\n  };\n  /**\n   * Calls for child element data bind\n   *\n   * @param {Object} obj ?\n   * @param {Object} parent ?\n   * @returns {void} ?\n   */\n  // tslint:disable-next-line:no-any\n\n\n  Base.callChildDataBind = function (obj, parent) {\n    var keys = Object.keys(obj);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n\n      if (parent[key] instanceof Array) {\n        for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {\n          var obj_1 = _b[_a];\n\n          if (obj_1.dataBind !== undefined) {\n            obj_1.dataBind();\n          }\n        }\n      } else {\n        parent[key].dataBind();\n      }\n    }\n  };\n\n  Base.prototype.clearChanges = function () {\n    this.finalUpdate();\n    this.changedProperties = {};\n    this.oldProperties = {};\n    this.childChangedProperties = {};\n  };\n  /**\n   * Bind property changes immediately to components\n   *\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.dataBind = function () {\n    Base.callChildDataBind(this.childChangedProperties, this);\n\n    if (Object.getOwnPropertyNames(this.changedProperties).length) {\n      var prevDetection = this.isProtectedOnChange;\n      var newChanges = this.changedProperties;\n      var oldChanges = this.oldProperties;\n      this.clearChanges();\n      this.isProtectedOnChange = true;\n      this.onPropertyChanged(newChanges, oldChanges);\n      this.isProtectedOnChange = prevDetection;\n    }\n  };\n  /* tslint:disable:no-any */\n\n\n  Base.prototype.serverDataBind = function (newChanges) {\n    if (!isBlazor()) {\n      return;\n    }\n\n    newChanges = newChanges ? newChanges : {};\n    extend(this.bulkChanges, {}, newChanges, true);\n    var sfBlazor = 'sfBlazor';\n\n    if (this.allowServerDataBinding && window[sfBlazor].updateModel) {\n      window[sfBlazor].updateModel(this);\n      this.bulkChanges = {};\n    }\n  };\n  /* tslint:enable:no-any */\n\n\n  Base.prototype.saveChanges = function (key, newValue, oldValue) {\n    if (isBlazor()) {\n      // tslint:disable-next-line:no-any\n      var newChanges = {};\n      newChanges[key] = newValue;\n      this.serverDataBind(newChanges);\n    }\n\n    if (this.isProtectedOnChange) {\n      return;\n    }\n\n    this.oldProperties[key] = oldValue;\n    this.changedProperties[key] = newValue;\n    this.finalUpdate();\n    this.finalUpdate = setImmediate(this.dataBind.bind(this));\n  };\n  /** Event Base Section */\n\n  /**\n   * Adds the handler to the given event listener.\n   *\n   * @param {string} eventName - A String that specifies the name of the event\n   * @param {Function} handler - Specifies the call to run when the event occurs.\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.addEventListener = function (eventName, handler) {\n    this.modelObserver.on(eventName, handler);\n  };\n  /**\n   * Removes the handler from the given event listener.\n   *\n   * @param {string} eventName - A String that specifies the name of the event to remove\n   * @param {Function} handler - Specifies the function to remove\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.removeEventListener = function (eventName, handler) {\n    this.modelObserver.off(eventName, handler);\n  };\n  /**\n   * Triggers the handlers in the specified event.\n   *\n   * @private\n   * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n   * Can be a custom event, or any of the standard events.\n   * @param {Event} eventProp - Additional parameters to pass on to the event properties\n   * @param {Function} successHandler - this function will invoke after event successfully triggered\n   * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.trigger = function (eventName, eventProp, successHandler, errorHandler) {\n    var _this = this;\n\n    if (this.isDestroyed !== true) {\n      var prevDetection = this.isProtectedOnChange;\n      this.isProtectedOnChange = false;\n      var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n\n      if (isColEName.test(eventName)) {\n        var handler = getValue(eventName, this);\n\n        if (handler) {\n          var blazor = 'Blazor';\n\n          if (window[blazor]) {\n            var promise = handler.call(this, eventProp);\n\n            if (promise && typeof promise.then === 'function') {\n              if (!successHandler) {\n                data = promise;\n              } else {\n                promise.then(function (data) {\n                  if (successHandler) {\n                    data = typeof data === 'string' && _this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                    successHandler.call(_this, data);\n                  }\n                }).catch(function (data) {\n                  if (errorHandler) {\n                    data = typeof data === 'string' && _this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                    errorHandler.call(_this, data);\n                  }\n                });\n              }\n            } else if (successHandler) {\n              successHandler.call(this, eventProp);\n            }\n          } else {\n            handler.call(this, eventProp);\n\n            if (successHandler) {\n              successHandler.call(this, eventProp);\n            }\n          }\n        } else if (successHandler) {\n          successHandler.call(this, eventProp);\n        }\n      }\n\n      this.isProtectedOnChange = prevDetection;\n      return data;\n    }\n  };\n  /**\n   * To maintain instance in base class\n   *\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.addInstance = function () {\n    // Add module class to the root element\n    var moduleClass = 'e-' + this.getModuleName().toLowerCase();\n    addClass([this.element], ['e-lib', moduleClass]);\n\n    if (!isNullOrUndefined(this.element.ej2_instances)) {\n      this.element.ej2_instances.push(this);\n    } else {\n      setValue('ej2_instances', [this], this.element);\n    }\n  };\n  /**\n   * To remove the instance from the element\n   *\n   * @returns {void} ?\n   */\n\n\n  Base.prototype.destroy = function () {\n    var _this = this; // eslint-disable-next-line\n\n\n    this.element.ej2_instances = this.element.ej2_instances.filter(function (i) {\n      return i !== _this;\n    });\n    removeClass([this.element], ['e-' + this.getModuleName()]);\n\n    if (this.element.ej2_instances.length === 0) {\n      // Remove module class from the root element\n      removeClass([this.element], ['e-lib']);\n    }\n\n    this.clearChanges();\n    this.modelObserver.destroy();\n    this.isDestroyed = true;\n  };\n\n  return Base;\n}();\n\nexport { Base };\n/**\n * Global function to get the component instance from the rendered element.\n *\n * @param {HTMLElement} elem Specifies the HTMLElement or element id string.\n * @param {string} comp Specifies the component module name or Component.\n * @returns {any} ?\n */\n// tslint:disable-next-line:no-any\n\nexport function getComponent(elem, comp) {\n  var instance;\n  var i;\n  var ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n\n  for (i = 0; i < ele.ej2_instances.length; i++) {\n    instance = ele.ej2_instances[i];\n\n    if (typeof comp === 'string') {\n      var compName = instance.getModuleName();\n\n      if (comp === compName) {\n        return instance;\n      }\n    } else {\n      // tslint:disable-next-line:no-any\n      if (instance instanceof comp) {\n        return instance;\n      }\n    }\n  }\n\n  return undefined;\n}\n/**\n * Function to remove the child instances.\n *\n * @param {HTMLElement} element ?\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\n\nexport function removeChildInstance(element) {\n  // tslint:disable-next-line:no-any\n  var childEle = [].slice.call(element.getElementsByClassName('e-control'));\n\n  for (var i = 0; i < childEle.length; i++) {\n    var compName = childEle[i].classList[1].split('e-')[1]; // tslint:disable-next-line:no-any\n\n    var compInstance = getComponent(childEle[i], compName);\n\n    if (!isUndefined(compInstance)) {\n      compInstance.destroy();\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-inputs/node_modules/@syncfusion/ej2-base/src/base.js"],"names":["isUndefined","isNullOrUndefined","merge","setImmediate","setValue","isBlazor","getValue","extend","addClass","removeClass","Observer","isColEName","RegExp","Base","options","element","isRendered","isComplexArraySetter","isServerRendered","allowServerDataBinding","isProtectedOnChange","properties","changedProperties","oldProperties","bulkChanges","refreshing","ignoreCollectionWatch","finalUpdate","childChangedProperties","modelObserver","document","querySelector","addInstance","setProperties","isDestroyed","prototype","prop","muteOnChange","prevDetection","dataBind","serverDataBind","callChildDataBind","obj","parent","keys","Object","_i","keys_1","length","key","Array","_a","_b","obj_1","undefined","clearChanges","getOwnPropertyNames","newChanges","oldChanges","onPropertyChanged","sfBlazor","window","updateModel","saveChanges","newValue","oldValue","bind","addEventListener","eventName","handler","on","removeEventListener","off","trigger","eventProp","successHandler","errorHandler","_this","data","notify","test","blazor","promise","call","then","isJson","JSON","parse","catch","moduleClass","getModuleName","toLowerCase","ej2_instances","push","destroy","filter","i","getComponent","elem","comp","instance","ele","getElementById","compName","removeChildInstance","childEle","slice","getElementsByClassName","classList","split","compInstance"],"mappings":"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","sourcesContent":["import { isUndefined, isNullOrUndefined, merge, setImmediate, setValue, isBlazor, getValue, extend } from './util';\nimport { addClass, removeClass } from './dom';\nimport { Observer } from './observer';\nvar isColEName = new RegExp(']');\n/* tslint:enable:no-any */\n/**\n * Base library module is common module for Framework modules like touch,keyboard and etc.,\n *\n * @private\n */\nvar Base = /** @class */ (function () {\n    /**\n     * Base constructor accept options and element\n     *\n     * @param {Object} options ?\n     * @param {string} element ?\n     */\n    function Base(options, element) {\n        this.isRendered = false;\n        this.isComplexArraySetter = false;\n        this.isServerRendered = false;\n        this.allowServerDataBinding = true;\n        this.isProtectedOnChange = true;\n        this.properties = {};\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.bulkChanges = {};\n        this.refreshing = false;\n        this.ignoreCollectionWatch = false;\n        // eslint-disable-next-line\n        this.finalUpdate = function () { };\n        this.childChangedProperties = {};\n        this.modelObserver = new Observer(this);\n        if (!isUndefined(element)) {\n            if ('string' === typeof (element)) {\n                this.element = document.querySelector(element);\n            }\n            else {\n                this.element = element;\n            }\n            if (!isNullOrUndefined(this.element)) {\n                this.isProtectedOnChange = false;\n                this.addInstance();\n            }\n        }\n        if (!isUndefined(options)) {\n            this.setProperties(options, true);\n        }\n        this.isDestroyed = false;\n    }\n    /** Property base section */\n    /**\n     * Function used to set bunch of property at a time.\n     *\n     * @private\n     * @param  {Object} prop - JSON object which holds components properties.\n     * @param  {boolean} muteOnChange ? - Specifies to true when we set properties.\n     * @returns {void} ?\n     */\n    Base.prototype.setProperties = function (prop, muteOnChange) {\n        var prevDetection = this.isProtectedOnChange;\n        this.isProtectedOnChange = !!muteOnChange;\n        merge(this, prop);\n        if (muteOnChange !== true) {\n            merge(this.changedProperties, prop);\n            this.dataBind();\n        }\n        else if (isBlazor() && this.isRendered) {\n            this.serverDataBind(prop);\n        }\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.isProtectedOnChange = prevDetection;\n    };\n    /**\n     * Calls for child element data bind\n     *\n     * @param {Object} obj ?\n     * @param {Object} parent ?\n     * @returns {void} ?\n     */\n    // tslint:disable-next-line:no-any\n    Base.callChildDataBind = function (obj, parent) {\n        var keys = Object.keys(obj);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            if (parent[key] instanceof Array) {\n                for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {\n                    var obj_1 = _b[_a];\n                    if (obj_1.dataBind !== undefined) {\n                        obj_1.dataBind();\n                    }\n                }\n            }\n            else {\n                parent[key].dataBind();\n            }\n        }\n    };\n    Base.prototype.clearChanges = function () {\n        this.finalUpdate();\n        this.changedProperties = {};\n        this.oldProperties = {};\n        this.childChangedProperties = {};\n    };\n    /**\n     * Bind property changes immediately to components\n     *\n     * @returns {void} ?\n     */\n    Base.prototype.dataBind = function () {\n        Base.callChildDataBind(this.childChangedProperties, this);\n        if (Object.getOwnPropertyNames(this.changedProperties).length) {\n            var prevDetection = this.isProtectedOnChange;\n            var newChanges = this.changedProperties;\n            var oldChanges = this.oldProperties;\n            this.clearChanges();\n            this.isProtectedOnChange = true;\n            this.onPropertyChanged(newChanges, oldChanges);\n            this.isProtectedOnChange = prevDetection;\n        }\n    };\n    /* tslint:disable:no-any */\n    Base.prototype.serverDataBind = function (newChanges) {\n        if (!isBlazor()) {\n            return;\n        }\n        newChanges = newChanges ? newChanges : {};\n        extend(this.bulkChanges, {}, newChanges, true);\n        var sfBlazor = 'sfBlazor';\n        if (this.allowServerDataBinding && window[sfBlazor].updateModel) {\n            window[sfBlazor].updateModel(this);\n            this.bulkChanges = {};\n        }\n    };\n    /* tslint:enable:no-any */\n    Base.prototype.saveChanges = function (key, newValue, oldValue) {\n        if (isBlazor()) {\n            // tslint:disable-next-line:no-any\n            var newChanges = {};\n            newChanges[key] = newValue;\n            this.serverDataBind(newChanges);\n        }\n        if (this.isProtectedOnChange) {\n            return;\n        }\n        this.oldProperties[key] = oldValue;\n        this.changedProperties[key] = newValue;\n        this.finalUpdate();\n        this.finalUpdate = setImmediate(this.dataBind.bind(this));\n    };\n    /** Event Base Section */\n    /**\n     * Adds the handler to the given event listener.\n     *\n     * @param {string} eventName - A String that specifies the name of the event\n     * @param {Function} handler - Specifies the call to run when the event occurs.\n     * @returns {void} ?\n     */\n    Base.prototype.addEventListener = function (eventName, handler) {\n        this.modelObserver.on(eventName, handler);\n    };\n    /**\n     * Removes the handler from the given event listener.\n     *\n     * @param {string} eventName - A String that specifies the name of the event to remove\n     * @param {Function} handler - Specifies the function to remove\n     * @returns {void} ?\n     */\n    Base.prototype.removeEventListener = function (eventName, handler) {\n        this.modelObserver.off(eventName, handler);\n    };\n    /**\n     * Triggers the handlers in the specified event.\n     *\n     * @private\n     * @param {string} eventName - Specifies the event to trigger for the specified component properties.\n     * Can be a custom event, or any of the standard events.\n     * @param {Event} eventProp - Additional parameters to pass on to the event properties\n     * @param {Function} successHandler - this function will invoke after event successfully triggered\n     * @param {Function} errorHandler - this function will invoke after event if it failured to call.\n     * @returns {void} ?\n     */\n    Base.prototype.trigger = function (eventName, eventProp, successHandler, errorHandler) {\n        var _this = this;\n        if (this.isDestroyed !== true) {\n            var prevDetection = this.isProtectedOnChange;\n            this.isProtectedOnChange = false;\n            var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);\n            if (isColEName.test(eventName)) {\n                var handler = getValue(eventName, this);\n                if (handler) {\n                    var blazor = 'Blazor';\n                    if (window[blazor]) {\n                        var promise = handler.call(this, eventProp);\n                        if (promise && typeof promise.then === 'function') {\n                            if (!successHandler) {\n                                data = promise;\n                            }\n                            else {\n                                promise.then(function (data) {\n                                    if (successHandler) {\n                                        data = typeof data === 'string' && _this.modelObserver.isJson(data) ?\n                                            JSON.parse(data) : data;\n                                        successHandler.call(_this, data);\n                                    }\n                                }).catch(function (data) {\n                                    if (errorHandler) {\n                                        data = typeof data === 'string' && _this.modelObserver.isJson(data) ? JSON.parse(data) : data;\n                                        errorHandler.call(_this, data);\n                                    }\n                                });\n                            }\n                        }\n                        else if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                    else {\n                        handler.call(this, eventProp);\n                        if (successHandler) {\n                            successHandler.call(this, eventProp);\n                        }\n                    }\n                }\n                else if (successHandler) {\n                    successHandler.call(this, eventProp);\n                }\n            }\n            this.isProtectedOnChange = prevDetection;\n            return data;\n        }\n    };\n    /**\n     * To maintain instance in base class\n     *\n     * @returns {void} ?\n     */\n    Base.prototype.addInstance = function () {\n        // Add module class to the root element\n        var moduleClass = 'e-' + this.getModuleName().toLowerCase();\n        addClass([this.element], ['e-lib', moduleClass]);\n        if (!isNullOrUndefined(this.element.ej2_instances)) {\n            this.element.ej2_instances.push(this);\n        }\n        else {\n            setValue('ej2_instances', [this], this.element);\n        }\n    };\n    /**\n     * To remove the instance from the element\n     *\n     * @returns {void} ?\n     */\n    Base.prototype.destroy = function () {\n        var _this = this;\n        // eslint-disable-next-line\n        this.element.ej2_instances =\n            this.element.ej2_instances.filter(function (i) { return i !== _this; });\n        removeClass([this.element], ['e-' + this.getModuleName()]);\n        if (this.element.ej2_instances.length === 0) {\n            // Remove module class from the root element\n            removeClass([this.element], ['e-lib']);\n        }\n        this.clearChanges();\n        this.modelObserver.destroy();\n        this.isDestroyed = true;\n    };\n    return Base;\n}());\nexport { Base };\n/**\n * Global function to get the component instance from the rendered element.\n *\n * @param {HTMLElement} elem Specifies the HTMLElement or element id string.\n * @param {string} comp Specifies the component module name or Component.\n * @returns {any} ?\n */\n// tslint:disable-next-line:no-any\nexport function getComponent(elem, comp) {\n    var instance;\n    var i;\n    var ele = typeof elem === 'string' ? document.getElementById(elem) : elem;\n    for (i = 0; i < ele.ej2_instances.length; i++) {\n        instance = ele.ej2_instances[i];\n        if (typeof comp === 'string') {\n            var compName = instance.getModuleName();\n            if (comp === compName) {\n                return instance;\n            }\n        }\n        else {\n            // tslint:disable-next-line:no-any\n            if (instance instanceof comp) {\n                return instance;\n            }\n        }\n    }\n    return undefined;\n}\n/**\n * Function to remove the child instances.\n *\n * @param {HTMLElement} element ?\n * @return {void}\n * @private\n */\n// tslint:disable-next-line:no-any\nexport function removeChildInstance(element) {\n    // tslint:disable-next-line:no-any\n    var childEle = [].slice.call(element.getElementsByClassName('e-control'));\n    for (var i = 0; i < childEle.length; i++) {\n        var compName = childEle[i].classList[1].split('e-')[1];\n        // tslint:disable-next-line:no-any\n        var compInstance = getComponent(childEle[i], compName);\n        if (!isUndefined(compInstance)) {\n            compInstance.destroy();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}