{"ast":null,"code":"import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\n\nvar Row =\n/** @class */\nfunction () {\n  function Row(options, parent) {\n    merge(this, options);\n    this.parent = parent;\n  }\n\n  Row.prototype.clone = function () {\n    var row = new Row({});\n    merge(row, this);\n    row.cells = this.cells.map(function (cell) {\n      return cell.clone();\n    });\n    return row;\n  };\n  /**\n   * Replaces the row data and grid refresh the particular row element only.\n   *\n   * @param  {Object} data - To update new data for the particular row.\n   * @returns {void}\n   */\n\n\n  Row.prototype.setRowValue = function (data) {\n    if (!this.parent) {\n      return;\n    }\n\n    var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n    this.parent.setRowData(key, data);\n  };\n  /**\n   * Replaces the given field value and refresh the particular cell element only.\n   *\n   * @param {string} field - Specifies the field name which you want to update.\n   * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n   * @returns {void}\n   */\n\n\n  Row.prototype.setCellValue = function (field, value) {\n    if (!this.parent) {\n      return;\n    }\n\n    var isValDiff = !(this.data[field].toString() === value.toString());\n\n    if (isValDiff) {\n      var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n      var key = this.data[pKeyField];\n      this.parent.setCellValue(key, field, value);\n      this.makechanges(pKeyField, this.data);\n    } else {\n      return;\n    }\n  };\n\n  Row.prototype.makechanges = function (key, data) {\n    if (!this.parent) {\n      return;\n    }\n\n    var gObj = this.parent;\n    var dataManager = gObj.getDataModule().dataManager;\n    dataManager.update(key, data);\n  };\n\n  return Row;\n}();\n\nexport { Row };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-grids/node_modules/@syncfusion/ej2-grids/src/grid/models/row.js"],"names":["merge","Row","options","parent","prototype","clone","row","cells","map","cell","setRowValue","data","key","getPrimaryKeyFieldNames","setRowData","setCellValue","field","value","isValDiff","toString","pKeyField","makechanges","gObj","dataManager","getDataModule","update"],"mappings":"AAAA,SAASA,KAAT,QAAsB,sBAAtB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,GAAG;AAAG;AAAe,YAAY;AACjC,WAASA,GAAT,CAAaC,OAAb,EAAsBC,MAAtB,EAA8B;AAC1BH,IAAAA,KAAK,CAAC,IAAD,EAAOE,OAAP,CAAL;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDF,EAAAA,GAAG,CAACG,SAAJ,CAAcC,KAAd,GAAsB,YAAY;AAC9B,QAAIC,GAAG,GAAG,IAAIL,GAAJ,CAAQ,EAAR,CAAV;AACAD,IAAAA,KAAK,CAACM,GAAD,EAAM,IAAN,CAAL;AACAA,IAAAA,GAAG,CAACC,KAAJ,GAAY,KAAKA,KAAL,CAAWC,GAAX,CAAe,UAAUC,IAAV,EAAgB;AAAE,aAAOA,IAAI,CAACJ,KAAL,EAAP;AAAsB,KAAvD,CAAZ;AACA,WAAOC,GAAP;AACH,GALD;AAMA;AACJ;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,GAAG,CAACG,SAAJ,CAAcM,WAAd,GAA4B,UAAUC,IAAV,EAAgB;AACxC,QAAI,CAAC,KAAKR,MAAV,EAAkB;AACd;AACH;;AACD,QAAIS,GAAG,GAAG,KAAKD,IAAL,CAAU,KAAKR,MAAL,CAAYU,uBAAZ,GAAsC,CAAtC,CAAV,CAAV;AACA,SAAKV,MAAL,CAAYW,UAAZ,CAAuBF,GAAvB,EAA4BD,IAA5B;AACH,GAND;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIV,EAAAA,GAAG,CAACG,SAAJ,CAAcW,YAAd,GAA6B,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACjD,QAAI,CAAC,KAAKd,MAAV,EAAkB;AACd;AACH;;AACD,QAAIe,SAAS,GAAG,EAAE,KAAKP,IAAL,CAAUK,KAAV,EAAiBG,QAAjB,OAAgCF,KAAK,CAACE,QAAN,EAAlC,CAAhB;;AACA,QAAID,SAAJ,EAAe;AACX,UAAIE,SAAS,GAAG,KAAKjB,MAAL,CAAYU,uBAAZ,GAAsC,CAAtC,CAAhB;AACA,UAAID,GAAG,GAAG,KAAKD,IAAL,CAAUS,SAAV,CAAV;AACA,WAAKjB,MAAL,CAAYY,YAAZ,CAAyBH,GAAzB,EAA8BI,KAA9B,EAAqCC,KAArC;AACA,WAAKI,WAAL,CAAiBD,SAAjB,EAA4B,KAAKT,IAAjC;AACH,KALD,MAMK;AACD;AACH;AACJ,GAdD;;AAeAV,EAAAA,GAAG,CAACG,SAAJ,CAAciB,WAAd,GAA4B,UAAUT,GAAV,EAAeD,IAAf,EAAqB;AAC7C,QAAI,CAAC,KAAKR,MAAV,EAAkB;AACd;AACH;;AACD,QAAImB,IAAI,GAAG,KAAKnB,MAAhB;AACA,QAAIoB,WAAW,GAAGD,IAAI,CAACE,aAAL,GAAqBD,WAAvC;AACAA,IAAAA,WAAW,CAACE,MAAZ,CAAmBb,GAAnB,EAAwBD,IAAxB;AACH,GAPD;;AAQA,SAAOV,GAAP;AACH,CAvDwB,EAAzB;;AAwDA,SAASA,GAAT","sourcesContent":["import { merge } from '@syncfusion/ej2-base';\n/**\n * Row\n *\n * @hidden\n */\nvar Row = /** @class */ (function () {\n    function Row(options, parent) {\n        merge(this, options);\n        this.parent = parent;\n    }\n    Row.prototype.clone = function () {\n        var row = new Row({});\n        merge(row, this);\n        row.cells = this.cells.map(function (cell) { return cell.clone(); });\n        return row;\n    };\n    /**\n     * Replaces the row data and grid refresh the particular row element only.\n     *\n     * @param  {Object} data - To update new data for the particular row.\n     * @returns {void}\n     */\n    Row.prototype.setRowValue = function (data) {\n        if (!this.parent) {\n            return;\n        }\n        var key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];\n        this.parent.setRowData(key, data);\n    };\n    /**\n     * Replaces the given field value and refresh the particular cell element only.\n     *\n     * @param {string} field - Specifies the field name which you want to update.\n     * @param {string | number | boolean | Date} value - To update new value for the particular cell.\n     * @returns {void}\n     */\n    Row.prototype.setCellValue = function (field, value) {\n        if (!this.parent) {\n            return;\n        }\n        var isValDiff = !(this.data[field].toString() === value.toString());\n        if (isValDiff) {\n            var pKeyField = this.parent.getPrimaryKeyFieldNames()[0];\n            var key = this.data[pKeyField];\n            this.parent.setCellValue(key, field, value);\n            this.makechanges(pKeyField, this.data);\n        }\n        else {\n            return;\n        }\n    };\n    Row.prototype.makechanges = function (key, data) {\n        if (!this.parent) {\n            return;\n        }\n        var gObj = this.parent;\n        var dataManager = gObj.getDataModule().dataManager;\n        dataManager.update(key, data);\n    };\n    return Row;\n}());\nexport { Row };\n"]},"metadata":{},"sourceType":"module"}