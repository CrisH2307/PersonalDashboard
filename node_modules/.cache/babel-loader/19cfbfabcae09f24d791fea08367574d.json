{"ast":null,"code":"/* eslint-disable no-case-declarations */\n\n/* eslint-disable jsdoc/require-returns */\n\n/* eslint-disable valid-jsdoc */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\n\nvar CanvasRenderer =\n/** @class */\nfunction () {\n  /* End-Properties */\n  function CanvasRenderer(rootID) {\n    this.rootId = rootID;\n  } // method to get the attributes value\n  // tslint:disable-next-line:no-any\n\n\n  CanvasRenderer.prototype.getOptionValue = function (options, key) {\n    return options[key];\n  };\n  /* tslint:enable */\n\n  /**\n   * To create a Html5 canvas element\n   *\n   * @param {BaseAttibutes} options - Options to create canvas\n   * @returns {HTMLCanvasElement} Creating a canvas\n   */\n\n\n  CanvasRenderer.prototype.createCanvas = function (options) {\n    var canvasObj = document.createElement('canvas');\n    canvasObj.setAttribute('id', this.rootId + '_canvas');\n    this.ctx = canvasObj.getContext('2d');\n    this.canvasObj = canvasObj;\n    this.setCanvasSize(options.width, options.height);\n    return this.canvasObj;\n  };\n  /**\n   * To set the width and height for the Html5 canvas element\n   *\n   * @param {number} width - width of the canvas\n   * @param {number} height - height of the canvas\n   * @returns {void} Setting canvas size\n   */\n\n\n  CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n    var element = document.getElementById(this.rootId);\n    var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n\n    if (isNullOrUndefined(this.width)) {\n      this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n    } else {\n      this.canvasObj.setAttribute('width', this.width.toString());\n    }\n\n    if (isNullOrUndefined(this.height)) {\n      this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n    } else {\n      this.canvasObj.setAttribute('height', this.height.toString());\n    }\n  }; // To set the values to the attributes\n\n\n  CanvasRenderer.prototype.setAttributes = function (options) {\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n\n    if (!isNullOrUndefined(dashArray)) {\n      var dashArrayString = dashArray.split(',');\n      this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n    }\n\n    this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n  };\n  /**\n   * To draw a line\n   *\n   * @param {LineAttributes} options - required options to draw a line on the canvas\n   * @returns {void} To draw a line\n   */\n\n\n  CanvasRenderer.prototype.drawLine = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.moveTo(options.x1, options.y1);\n    this.ctx.lineTo(options.x2, options.y2);\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw a rectangle\n   *\n   * @param {RectAttributes} options - required options to draw a rectangle on the canvas.\n   * @param {Int32Array} canvasTranslate TO get a translate value of canvas.\n   * @returns {void} To draw rectangle.\n   */\n\n\n  CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var cornerRadius = options.rx;\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n    this.setAttributes(options);\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n\n    if (cornerRadius !== null && cornerRadius >= 0) {\n      this.drawCornerRadius(options);\n    } else {\n      if (options.fill === 'none') {\n        options.fill = 'transparent';\n      }\n\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fillRect(options.x, options.y, options.width, options.height);\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  }; // To draw the corner of a rectangle\n\n\n  CanvasRenderer.prototype.drawCornerRadius = function (options) {\n    var cornerRadius = options.rx;\n    var x = options.x;\n    var y = options.y;\n    var width = options.width;\n    var height = options.height;\n\n    if (options.fill === 'none') {\n      options.fill = 'transparent';\n    }\n\n    this.ctx.fillStyle = options.fill;\n\n    if (width < 2 * cornerRadius) {\n      cornerRadius = width / 2;\n    }\n\n    if (height < 2 * cornerRadius) {\n      cornerRadius = height / 2;\n    }\n\n    this.ctx.beginPath();\n    this.ctx.moveTo(x + width - cornerRadius, y);\n    this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n    this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n    this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n    this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n    this.ctx.closePath();\n    this.ctx.fill();\n    this.ctx.stroke();\n  };\n  /**\n   * To draw a path on the canvas\n   *\n   * @param {PathAttributes} options - options needed to draw path.\n   * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas.\n   * @returns {Element} To draw a path.\n   */\n\n\n  CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n    var path = options.d;\n    var dataSplit = path.split(' ');\n    var borderWidth = this.getOptionValue(options, 'stroke-width');\n    var canvasCtx = this.ctx;\n    var flag = true;\n    this.ctx.save();\n    this.ctx.beginPath();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n    this.setAttributes(options);\n\n    for (var i = 0; i < dataSplit.length; i = i + 3) {\n      var x1 = parseFloat(dataSplit[i + 1]);\n      var y1 = parseFloat(dataSplit[i + 2]);\n\n      switch (dataSplit[i]) {\n        case 'M':\n          if (!options.innerR && !options.cx) {\n            this.ctx.moveTo(x1, y1);\n          }\n\n          break;\n\n        case 'L':\n          if (!options.innerR) {\n            this.ctx.lineTo(x1, y1);\n          }\n\n          break;\n\n        case 'Q':\n          var q1 = parseFloat(dataSplit[i + 3]);\n          var q2 = parseFloat(dataSplit[i + 4]);\n          this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n          i = i + 2;\n          break;\n\n        case 'C':\n          var c1 = parseFloat(dataSplit[i + 3]);\n          var c2 = parseFloat(dataSplit[i + 4]);\n          var c3 = parseFloat(dataSplit[i + 5]);\n          var c4 = parseFloat(dataSplit[i + 6]);\n          this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n          i = i + 4;\n          break;\n\n        case 'A':\n          if (!options.innerR) {\n            if (options.cx) {\n              this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n            } else {\n              this.ctx.moveTo(options.x, options.y);\n              this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n              this.ctx.lineTo(options.x, options.y);\n            }\n          } else if (flag) {\n            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n            this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n            flag = false;\n          }\n\n          i = i + 5;\n          break;\n\n        case 'z':\n        case 'Z':\n          this.ctx.closePath(); //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n\n          i = i - 2;\n          break;\n      }\n    }\n\n    if (options.fill !== 'none' && options.fill !== undefined) {\n      this.ctx.fillStyle = options.fill;\n      this.ctx.fill();\n    }\n\n    if (borderWidth > 0) {\n      this.ctx.stroke();\n    }\n\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw a text\n   *\n   * @param {TextAttributes} options - options required to draw text\n   * @param {string} label - Specifies the text which has to be drawn on the canvas\n   * @param {number} transX - Specifies the text of translate X\n   * @param {number} transY - Specifies the text of translate Y\n   * @param {number} dy - Specifies the text of translate dy\n   * @param {boolean} isTSpan - Specifies the boolean value of span value\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n    var fontWeight = this.getOptionValue(options, 'font-weight');\n\n    if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n      fontWeight = 'normal';\n    }\n\n    var fontSize = this.getOptionValue(options, 'font-size');\n    var fontFamily = this.getOptionValue(options, 'font-family');\n    var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n    var font = fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily;\n    var anchor = this.getOptionValue(options, 'text-anchor');\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    if (anchor === 'middle') {\n      anchor = 'center';\n    }\n\n    this.ctx.save();\n    this.ctx.fillStyle = options.fill;\n    this.ctx.font = font;\n    this.ctx.textAlign = anchor;\n    this.ctx.globalAlpha = opacity;\n\n    if (options.baseline) {\n      this.ctx.textBaseline = options.baseline;\n    }\n\n    if (!isTSpan) {\n      var txtlngth = 0;\n      this.ctx.translate(options.x + txtlngth / 2 + (transX ? transX : 0), options.y + (transY ? transY : 0));\n      this.ctx.rotate(options.labelRotation * Math.PI / 180);\n    }\n\n    this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n    this.ctx.restore();\n    return this.canvasObj;\n  };\n  /**\n   * To draw circle on the canvas\n   *\n   * @param {CircleAttributes} options - required options to draw the circle\n   * @param {Int32Array} canvasTranslate Translate value of canvas\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.globalAlpha = options.opacity;\n    this.ctx.fill();\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.setAttributes(options);\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n    return this.canvasObj;\n  };\n  /**\n   * To draw polyline\n   *\n   * @param {PolylineAttributes} options - options needed to draw polyline\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.drawPolyline = function (options) {\n    this.ctx.save();\n    this.ctx.beginPath();\n    var points = options.points.split(' ');\n\n    for (var i = 0; i < points.length - 1; i++) {\n      var point = points[i].split(',');\n      var x = parseFloat(point[0]);\n      var y = parseFloat(point[1]);\n\n      if (i === 0) {\n        this.ctx.moveTo(x, y);\n      } else {\n        this.ctx.lineTo(x, y);\n      }\n    }\n\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n  };\n  /**\n   * To draw an ellipse on the canvas\n   *\n   * @param {EllipseAttributes} options - options needed to draw ellipse\n   * @param {Int32Array} canvasTranslate Translate value of canvas\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n    var canvasCtx = this.ctx;\n    var circumference = Math.max(options.rx, options.ry);\n    var scaleX = options.rx / circumference;\n    var scaleY = options.ry / circumference;\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.translate(options.cx, options.cy);\n\n    if (canvasTranslate) {\n      this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n    }\n\n    this.ctx.save();\n    this.ctx.scale(scaleX, scaleY);\n    this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n    this.ctx.fillStyle = options.fill;\n    this.ctx.fill();\n    this.ctx.restore();\n    this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n    this.ctx.strokeStyle = options.stroke;\n    this.ctx.stroke();\n    this.ctx.restore();\n    this.ctx = canvasCtx;\n  };\n  /**\n   * To draw an image\n   *\n   * @param {ImageAttributes} options - options required to draw an image on the canvas\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.drawImage = function (options) {\n    this.ctx.save();\n    var imageObj = new Image();\n\n    if (!isNullOrUndefined(options.href)) {\n      imageObj.src = options.href;\n      this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n    }\n\n    this.ctx.restore();\n  };\n  /**\n   * To create a linear gradient\n   *\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @returns {string} It returns color\n   */\n\n\n  CanvasRenderer.prototype.createLinearGradient = function (colors) {\n    var myGradient;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n    }\n\n    var color = this.setGradientValues(colors, myGradient);\n    return color;\n  };\n  /**\n   * To create a radial gradient\n   *\n   * @param {string[]} colors - Specifies the colors required to create linear gradient\n   * @returns {string} It returns gradient color\n   */\n\n\n  CanvasRenderer.prototype.createRadialGradient = function (colors) {\n    var myGradient;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n    }\n\n    var colorName = this.setGradientValues(colors, myGradient);\n    return colorName;\n  }; // To set the gradient values\n\n\n  CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n    var colorName;\n\n    if (!isNullOrUndefined(colors[0].colorStop)) {\n      for (var i = 0; i <= colors.length - 1; i++) {\n        var color = colors[i].color;\n        var newColorStop = colors[i].colorStop.slice(0, -1);\n        var stopColor = parseInt(newColorStop, 10) / 100;\n        myGradient.addColorStop(stopColor, color);\n      }\n\n      colorName = myGradient.toString();\n    } else {\n      colorName = colors[0].color.toString();\n    }\n\n    return colorName;\n  };\n  /**\n   * To set the attributes to the element\n   *\n   * @param {SVGCanvasAttributes} options - Attributes to set for the element\n   * @param {HTMLElement} element - The element to which the attributes need to be set\n   * @returns {HTMLElement} It returns null value\n   */\n\n\n  CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n    var keys = Object.keys(options);\n    var values = Object.keys(options).map(function (key) {\n      return options[key];\n    });\n\n    for (var i = 0; i < keys.length; i++) {\n      element.setAttribute(keys[i], values[i]);\n    }\n\n    return null;\n  };\n  /**\n   * To update the values of the canvas element attributes\n   *\n   * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n   * @returns {void}\n   */\n\n\n  CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n    this.setElementAttributes(options, this.canvasObj);\n    var ctx = this.ctx;\n\n    if (!isNullOrUndefined(this.dataUrl)) {\n      var img_1 = new Image();\n\n      img_1.onload = function () {\n        ctx.drawImage(img_1, 0, 0);\n      };\n\n      img_1.src = this.dataUrl;\n    }\n  };\n  /**\n   * This method clears the given rectangle region\n   *\n   * @param {Rect} rect The rect parameter as passed\n   */\n\n\n  CanvasRenderer.prototype.clearRect = function (rect) {\n    this.ctx.restore();\n    this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n  };\n  /**\n   * For canvas rendering in chart\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n\n\n  CanvasRenderer.prototype.createGroup = function () {\n    return null;\n  };\n  /**\n   * To render a clip path\n   *\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n\n\n  CanvasRenderer.prototype.drawClipPath = function () {\n    return null;\n  };\n  /**\n   * Clip method to perform clip in canvas mode\n   *\n   * @param {BaseAttibutes} options The canvas clip of options\n   */\n\n\n  CanvasRenderer.prototype.canvasClip = function (options) {\n    this.ctx.save();\n    this.ctx.fillStyle = 'transparent';\n    this.ctx.rect(options.x, options.y, options.width, options.height);\n    this.ctx.fill();\n    this.ctx.clip();\n  };\n  /**\n   * Tp restore the canvas\n   */\n\n\n  CanvasRenderer.prototype.canvasRestore = function () {\n    this.ctx.restore();\n  };\n  /**\n   * To draw a polygon\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n\n\n  CanvasRenderer.prototype.drawPolygon = function () {\n    return null;\n  };\n  /**\n   * To create defs element in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   *\n   * @returns {Element} It returns null\n   */\n\n\n  CanvasRenderer.prototype.createDefs = function () {\n    return null;\n  };\n  /**\n   * To create clip path in SVG\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   */\n\n\n  CanvasRenderer.prototype.createClipPath = function () {\n    return null;\n  };\n  /**\n   * To create a Html5 SVG element\n   * Dummy method for using canvas/svg render in the same variable name in chart control\n   *\n   * @returns {Element} It returns null\n   */\n\n\n  CanvasRenderer.prototype.createSvg = function () {\n    return null;\n  };\n\n  return CanvasRenderer;\n}();\n\nexport { CanvasRenderer };","map":{"version":3,"sources":["C:/Users/khang/OneDrive/Tài liệu/JS/PersonalDashdoard/dashboard/node_modules/@syncfusion/ej2-react-charts/node_modules/@syncfusion/ej2-svg-base/src/svg-render/canvas-renderer.js"],"names":["isNullOrUndefined","CanvasRenderer","rootID","rootId","prototype","getOptionValue","options","key","createCanvas","canvasObj","document","createElement","setAttribute","ctx","getContext","setCanvasSize","width","height","element","getElementById","size","getBoundingClientRect","toString","setAttributes","lineWidth","dashArray","dashArrayString","split","setLineDash","parseInt","strokeStyle","drawLine","save","beginPath","stroke","moveTo","x1","y1","lineTo","x2","y2","restore","drawRectangle","canvasTranslate","canvasCtx","cornerRadius","rx","translate","globalAlpha","rect","x","y","drawCornerRadius","fill","fillStyle","fillRect","arcTo","closePath","drawPath","path","d","dataSplit","borderWidth","flag","opacity","i","length","parseFloat","innerR","cx","q1","q2","quadraticCurveTo","c1","c2","c3","c4","bezierCurveTo","arc","cy","radius","Math","PI","counterClockWise","start","end","undefined","createText","label","transX","transY","dy","isTSpan","fontWeight","toLowerCase","fontSize","fontFamily","fontStyle","font","anchor","textAlign","baseline","textBaseline","txtlngth","rotate","labelRotation","fillText","drawCircle","r","drawPolyline","points","point","drawEllipse","circumference","max","ry","scaleX","scaleY","scale","drawImage","imageObj","Image","href","src","createLinearGradient","colors","myGradient","colorStop","color","setGradientValues","createRadialGradient","colorName","newColorStop","slice","stopColor","addColorStop","setElementAttributes","keys","Object","values","map","updateCanvasAttributes","dataUrl","img_1","onload","clearRect","createGroup","drawClipPath","canvasClip","clip","canvasRestore","drawPolygon","createDefs","createClipPath","createSvg"],"mappings":"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","sourcesContent":["/* eslint-disable no-case-declarations */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * To import utils.\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\n/**\n * @private\n */\nvar CanvasRenderer = /** @class */ (function () {\n    /* End-Properties */\n    function CanvasRenderer(rootID) {\n        this.rootId = rootID;\n    }\n    // method to get the attributes value\n    // tslint:disable-next-line:no-any\n    CanvasRenderer.prototype.getOptionValue = function (options, key) {\n        return options[key];\n    };\n    /* tslint:enable */\n    /**\n     * To create a Html5 canvas element\n     *\n     * @param {BaseAttibutes} options - Options to create canvas\n     * @returns {HTMLCanvasElement} Creating a canvas\n     */\n    CanvasRenderer.prototype.createCanvas = function (options) {\n        var canvasObj = document.createElement('canvas');\n        canvasObj.setAttribute('id', this.rootId + '_canvas');\n        this.ctx = canvasObj.getContext('2d');\n        this.canvasObj = canvasObj;\n        this.setCanvasSize(options.width, options.height);\n        return this.canvasObj;\n    };\n    /**\n     * To set the width and height for the Html5 canvas element\n     *\n     * @param {number} width - width of the canvas\n     * @param {number} height - height of the canvas\n     * @returns {void} Setting canvas size\n     */\n    CanvasRenderer.prototype.setCanvasSize = function (width, height) {\n        var element = document.getElementById(this.rootId);\n        var size = !isNullOrUndefined(element) ? element.getBoundingClientRect() : null;\n        if (isNullOrUndefined(this.width)) {\n            this.canvasObj.setAttribute('width', width ? width.toString() : size.width.toString());\n        }\n        else {\n            this.canvasObj.setAttribute('width', this.width.toString());\n        }\n        if (isNullOrUndefined(this.height)) {\n            this.canvasObj.setAttribute('height', height ? height.toString() : '450');\n        }\n        else {\n            this.canvasObj.setAttribute('height', this.height.toString());\n        }\n    };\n    // To set the values to the attributes\n    CanvasRenderer.prototype.setAttributes = function (options) {\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        var dashArray = this.getOptionValue(options, 'stroke-dasharray');\n        if (!isNullOrUndefined(dashArray)) {\n            var dashArrayString = dashArray.split(',');\n            this.ctx.setLineDash([parseInt(dashArrayString[0], 10), parseInt(dashArrayString[1], 10)]);\n        }\n        this.ctx.strokeStyle = this.getOptionValue(options, 'stroke');\n    };\n    /**\n     * To draw a line\n     *\n     * @param {LineAttributes} options - required options to draw a line on the canvas\n     * @returns {void} To draw a line\n     */\n    CanvasRenderer.prototype.drawLine = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.moveTo(options.x1, options.y1);\n        this.ctx.lineTo(options.x2, options.y2);\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw a rectangle\n     *\n     * @param {RectAttributes} options - required options to draw a rectangle on the canvas.\n     * @param {Int32Array} canvasTranslate TO get a translate value of canvas.\n     * @returns {void} To draw rectangle.\n     */\n    CanvasRenderer.prototype.drawRectangle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var cornerRadius = options.rx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = this.getOptionValue(options, 'opacity');\n        this.setAttributes(options);\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        if (cornerRadius !== null && cornerRadius >= 0) {\n            this.drawCornerRadius(options);\n        }\n        else {\n            if (options.fill === 'none') {\n                options.fill = 'transparent';\n            }\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fillRect(options.x, options.y, options.width, options.height);\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return (this.canvasObj);\n    };\n    // To draw the corner of a rectangle\n    CanvasRenderer.prototype.drawCornerRadius = function (options) {\n        var cornerRadius = options.rx;\n        var x = options.x;\n        var y = options.y;\n        var width = options.width;\n        var height = options.height;\n        if (options.fill === 'none') {\n            options.fill = 'transparent';\n        }\n        this.ctx.fillStyle = options.fill;\n        if (width < 2 * cornerRadius) {\n            cornerRadius = width / 2;\n        }\n        if (height < 2 * cornerRadius) {\n            cornerRadius = height / 2;\n        }\n        this.ctx.beginPath();\n        this.ctx.moveTo(x + width - cornerRadius, y);\n        this.ctx.arcTo(x + width, y, x + width, y + height, cornerRadius);\n        this.ctx.arcTo(x + width, y + height, x, y + height, cornerRadius);\n        this.ctx.arcTo(x, y + height, x, y, cornerRadius);\n        this.ctx.arcTo(x, y, x + width, y, cornerRadius);\n        this.ctx.closePath();\n        this.ctx.fill();\n        this.ctx.stroke();\n    };\n    /**\n     * To draw a path on the canvas\n     *\n     * @param {PathAttributes} options - options needed to draw path.\n     * @param {Int32Array} canvasTranslate - Array of numbers to translate the canvas.\n     * @returns {Element} To draw a path.\n     */\n    CanvasRenderer.prototype.drawPath = function (options, canvasTranslate) {\n        var path = options.d;\n        var dataSplit = path.split(' ');\n        var borderWidth = this.getOptionValue(options, 'stroke-width');\n        var canvasCtx = this.ctx;\n        var flag = true;\n        this.ctx.save();\n        this.ctx.beginPath();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.globalAlpha = options.opacity ? options.opacity : this.getOptionValue(options, 'fill-opacity');\n        this.setAttributes(options);\n        for (var i = 0; i < dataSplit.length; i = i + 3) {\n            var x1 = parseFloat(dataSplit[i + 1]);\n            var y1 = parseFloat(dataSplit[i + 2]);\n            switch (dataSplit[i]) {\n                case 'M':\n                    if (!options.innerR && !options.cx) {\n                        this.ctx.moveTo(x1, y1);\n                    }\n                    break;\n                case 'L':\n                    if (!options.innerR) {\n                        this.ctx.lineTo(x1, y1);\n                    }\n                    break;\n                case 'Q':\n                    var q1 = parseFloat(dataSplit[i + 3]);\n                    var q2 = parseFloat(dataSplit[i + 4]);\n                    this.ctx.quadraticCurveTo(x1, y1, q1, q2);\n                    i = i + 2;\n                    break;\n                case 'C':\n                    var c1 = parseFloat(dataSplit[i + 3]);\n                    var c2 = parseFloat(dataSplit[i + 4]);\n                    var c3 = parseFloat(dataSplit[i + 5]);\n                    var c4 = parseFloat(dataSplit[i + 6]);\n                    this.ctx.bezierCurveTo(x1, y1, c1, c2, c3, c4);\n                    i = i + 4;\n                    break;\n                case 'A':\n                    if (!options.innerR) {\n                        if (options.cx) {\n                            this.ctx.arc(options.cx, options.cy, options.radius, 0, 2 * Math.PI, options.counterClockWise);\n                        }\n                        else {\n                            this.ctx.moveTo(options.x, options.y);\n                            this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                            this.ctx.lineTo(options.x, options.y);\n                        }\n                    }\n                    else if (flag) {\n                        this.ctx.arc(options.x, options.y, options.radius, options.start, options.end, options.counterClockWise);\n                        this.ctx.arc(options.x, options.y, options.innerR, options.end, options.start, !options.counterClockWise);\n                        flag = false;\n                    }\n                    i = i + 5;\n                    break;\n                case 'z':\n                case 'Z':\n                    this.ctx.closePath();\n                    //since for loop is incremented by 3, to get next value after 'z' i is decremented for 2.\n                    i = i - 2;\n                    break;\n            }\n        }\n        if (options.fill !== 'none' && options.fill !== undefined) {\n            this.ctx.fillStyle = options.fill;\n            this.ctx.fill();\n        }\n        if (borderWidth > 0) {\n            this.ctx.stroke();\n        }\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw a text\n     *\n     * @param {TextAttributes} options - options required to draw text\n     * @param {string} label - Specifies the text which has to be drawn on the canvas\n     * @param {number} transX - Specifies the text of translate X\n     * @param {number} transY - Specifies the text of translate Y\n     * @param {number} dy - Specifies the text of translate dy\n     * @param {boolean} isTSpan - Specifies the boolean value of span value\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.createText = function (options, label, transX, transY, dy, isTSpan) {\n        var fontWeight = this.getOptionValue(options, 'font-weight');\n        if (!isNullOrUndefined(fontWeight) && fontWeight.toLowerCase() === 'regular') {\n            fontWeight = 'normal';\n        }\n        var fontSize = this.getOptionValue(options, 'font-size');\n        var fontFamily = this.getOptionValue(options, 'font-family');\n        var fontStyle = this.getOptionValue(options, 'font-style').toLowerCase();\n        var font = (fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily);\n        var anchor = this.getOptionValue(options, 'text-anchor');\n        var opacity = options.opacity !== undefined ? options.opacity : 1;\n        if (anchor === 'middle') {\n            anchor = 'center';\n        }\n        this.ctx.save();\n        this.ctx.fillStyle = options.fill;\n        this.ctx.font = font;\n        this.ctx.textAlign = anchor;\n        this.ctx.globalAlpha = opacity;\n        if (options.baseline) {\n            this.ctx.textBaseline = options.baseline;\n        }\n        if (!isTSpan) {\n            var txtlngth = 0;\n            this.ctx.translate(options.x + (txtlngth / 2) + (transX ? transX : 0), options.y + (transY ? transY : 0));\n            this.ctx.rotate(options.labelRotation * Math.PI / 180);\n        }\n        this.ctx.fillText(label, isTSpan ? options.x : 0, isTSpan ? dy : 0);\n        this.ctx.restore();\n        return this.canvasObj;\n    };\n    /**\n     * To draw circle on the canvas\n     *\n     * @param {CircleAttributes} options - required options to draw the circle\n     * @param {Int32Array} canvasTranslate Translate value of canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawCircle = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.arc(options.cx, options.cy, options.r, 0, 2 * Math.PI);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.globalAlpha = options.opacity;\n        this.ctx.fill();\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.setAttributes(options);\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n        return this.canvasObj;\n    };\n    /**\n     * To draw polyline\n     *\n     * @param {PolylineAttributes} options - options needed to draw polyline\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawPolyline = function (options) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var points = options.points.split(' ');\n        for (var i = 0; i < points.length - 1; i++) {\n            var point = points[i].split(',');\n            var x = parseFloat(point[0]);\n            var y = parseFloat(point[1]);\n            if (i === 0) {\n                this.ctx.moveTo(x, y);\n            }\n            else {\n                this.ctx.lineTo(x, y);\n            }\n        }\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    /**\n     * To draw an ellipse on the canvas\n     *\n     * @param {EllipseAttributes} options - options needed to draw ellipse\n     * @param {Int32Array} canvasTranslate Translate value of canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawEllipse = function (options, canvasTranslate) {\n        var canvasCtx = this.ctx;\n        var circumference = Math.max(options.rx, options.ry);\n        var scaleX = options.rx / circumference;\n        var scaleY = options.ry / circumference;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.translate(options.cx, options.cy);\n        if (canvasTranslate) {\n            this.ctx.translate(canvasTranslate[0], canvasTranslate[1]);\n        }\n        this.ctx.save();\n        this.ctx.scale(scaleX, scaleY);\n        this.ctx.arc(0, 0, circumference, 0, 2 * Math.PI, false);\n        this.ctx.fillStyle = options.fill;\n        this.ctx.fill();\n        this.ctx.restore();\n        this.ctx.lineWidth = this.getOptionValue(options, 'stroke-width');\n        this.ctx.strokeStyle = options.stroke;\n        this.ctx.stroke();\n        this.ctx.restore();\n        this.ctx = canvasCtx;\n    };\n    /**\n     * To draw an image\n     *\n     * @param {ImageAttributes} options - options required to draw an image on the canvas\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.drawImage = function (options) {\n        this.ctx.save();\n        var imageObj = new Image();\n        if (!isNullOrUndefined(options.href)) {\n            imageObj.src = options.href;\n            this.ctx.drawImage(imageObj, options.x, options.y, options.width, options.height);\n        }\n        this.ctx.restore();\n    };\n    /**\n     * To create a linear gradient\n     *\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @returns {string} It returns color\n     */\n    CanvasRenderer.prototype.createLinearGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createLinearGradient(0, 0, 0, this.canvasObj.height);\n        }\n        var color = this.setGradientValues(colors, myGradient);\n        return color;\n    };\n    /**\n     * To create a radial gradient\n     *\n     * @param {string[]} colors - Specifies the colors required to create linear gradient\n     * @returns {string} It returns gradient color\n     */\n    CanvasRenderer.prototype.createRadialGradient = function (colors) {\n        var myGradient;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            myGradient = this.ctx.createRadialGradient(0, 0, 0, 0, 0, this.canvasObj.height);\n        }\n        var colorName = this.setGradientValues(colors, myGradient);\n        return colorName;\n    };\n    // To set the gradient values\n    CanvasRenderer.prototype.setGradientValues = function (colors, myGradient) {\n        var colorName;\n        if (!isNullOrUndefined(colors[0].colorStop)) {\n            for (var i = 0; i <= colors.length - 1; i++) {\n                var color = colors[i].color;\n                var newColorStop = (colors[i].colorStop).slice(0, -1);\n                var stopColor = parseInt(newColorStop, 10) / 100;\n                myGradient.addColorStop(stopColor, color);\n            }\n            colorName = myGradient.toString();\n        }\n        else {\n            colorName = colors[0].color.toString();\n        }\n        return colorName;\n    };\n    /**\n     * To set the attributes to the element\n     *\n     * @param {SVGCanvasAttributes} options - Attributes to set for the element\n     * @param {HTMLElement} element - The element to which the attributes need to be set\n     * @returns {HTMLElement} It returns null value\n     */\n    CanvasRenderer.prototype.setElementAttributes = function (options, element) {\n        var keys = Object.keys(options);\n        var values = Object.keys(options).map(function (key) { return options[key]; });\n        for (var i = 0; i < keys.length; i++) {\n            element.setAttribute(keys[i], values[i]);\n        }\n        return null;\n    };\n    /**\n     * To update the values of the canvas element attributes\n     *\n     * @param {SVGCanvasAttributes} options - Specifies the colors required to create gradient\n     * @returns {void}\n     */\n    CanvasRenderer.prototype.updateCanvasAttributes = function (options) {\n        this.setElementAttributes(options, this.canvasObj);\n        var ctx = this.ctx;\n        if (!isNullOrUndefined(this.dataUrl)) {\n            var img_1 = new Image;\n            img_1.onload = function () {\n                ctx.drawImage(img_1, 0, 0);\n            };\n            img_1.src = this.dataUrl;\n        }\n    };\n    /**\n     * This method clears the given rectangle region\n     *\n     * @param {Rect} rect The rect parameter as passed\n     */\n    CanvasRenderer.prototype.clearRect = function (rect) {\n        this.ctx.restore();\n        this.ctx.clearRect(rect.x, rect.y, rect.width, rect.height);\n    };\n    /**\n     * For canvas rendering in chart\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.createGroup = function () {\n        return null;\n    };\n    /**\n     * To render a clip path\n     *\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.drawClipPath = function () {\n        return null;\n    };\n    /**\n     * Clip method to perform clip in canvas mode\n     *\n     * @param {BaseAttibutes} options The canvas clip of options\n     */\n    CanvasRenderer.prototype.canvasClip = function (options) {\n        this.ctx.save();\n        this.ctx.fillStyle = 'transparent';\n        this.ctx.rect(options.x, options.y, options.width, options.height);\n        this.ctx.fill();\n        this.ctx.clip();\n    };\n    /**\n     * Tp restore the canvas\n     */\n    CanvasRenderer.prototype.canvasRestore = function () {\n        this.ctx.restore();\n    };\n    /**\n     * To draw a polygon\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.drawPolygon = function () {\n        return null;\n    };\n    /**\n     * To create defs element in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     *\n     * @returns {Element} It returns null\n     */\n    CanvasRenderer.prototype.createDefs = function () {\n        return null;\n    };\n    /**\n     * To create clip path in SVG\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     */\n    CanvasRenderer.prototype.createClipPath = function () {\n        return null;\n    };\n    /**\n     * To create a Html5 SVG element\n     * Dummy method for using canvas/svg render in the same variable name in chart control\n     *\n     * @returns {Element} It returns null\n     */\n    CanvasRenderer.prototype.createSvg = function () {\n        return null;\n    };\n    return CanvasRenderer;\n}());\nexport { CanvasRenderer };\n"]},"metadata":{},"sourceType":"module"}